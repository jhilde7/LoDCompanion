@page "/wilderness"
@rendermode InteractiveServer

@using LoDCompanion.Code.BackEnd.Models
@using LoDCompanion.Code.BackEnd.Services.Combat
@using LoDCompanion.Code.BackEnd.Services.Game
@using LoDCompanion.Code.BackEnd.Services.Player
@using LoDCompanion.Code.Components
@using LoDCompanion.Code.Components.Shared

@inject QuestService QuestService
@inject CombatManagerService CombatManager
@inject PartyManagerService PartyManager
@inject NavigationManager NavigationManager

<style>
    .wilderness-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        max-height: 100vh;
    }

    .game-area {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 1rem;
    }
</style>

<div class="wilderness-container">
    <QuestInfoModal IsVisible="_isQuestInfoVisible" OnClose="StartCombat" />

    @if (QuestService.IsQuestActive &&
        QuestService.ActiveQuest?.QuestType == QuestType.WildernessQuest &&
        QuestService.ActiveEncounterRoom != null)
    {
        bool isVictory = CombatManager.IsCombatOver && PartyManager.Party.Heroes.Any(h => h.CurrentHP > 0);
        bool isDefeat = CombatManager.IsCombatOver && !PartyManager.Party.Heroes.Any(h => h.CurrentHP > 0);

        <CombatCompletion IsVisible="CombatManager.IsCombatOver"
                          VictoryCheck="@(() => PartyManager.Party.Heroes.Any(h => h.CurrentHP > 0))"
                          Message="@(v => v ? "You have won. Now to assess the aftermath." : "Your party has fallen. The adventure ends here.")"
                          ContinueButtonText="@(v => v ? "Assess the Aftermath" : "Return to Main Menu")"
                          OnContinue="HandleCombatCompletion" />

        <Aftermath IsVisible="isAftermathVisible"
                   OnComplete="HandleAftermathComplete"
                   CompleteButtonText="Continue to Settlement" />

        @if (!CombatManager.IsCombatOver)
        {
            <div class="game-area">
                <GridDisplay Room="QuestService.ActiveEncounterRoom" OnHeroClicked="HandleHeroClick"
                             OnMonsterClicked="HandleMonsterClick" OnActionClicked="HandleContextMenuAction" />
            </div>

            <div class="combat-ui">
                <CombatInterface FeedbackMessage="@_feedbackMessage" OnActionButtonClicked="HandleActionButtonClick" />
            </div>
        }
    }
    else
    {
        <div class="no-quest-active">
            <h3>The wilderness is quiet... for now.</h3>
            <p>Your journey continues uneventfully.</p>
        </div>
    }
</div>

@code {
    private bool _isQuestInfoVisible = true;
    private bool isAftermathVisible = false;
    private enum InputState
    {
        AwaitingAction,
        SelectingTarget,
        SelectingDestination
    }
    private List<ActionInfo> _availableActions = new();

    private string _feedbackMessage = string.Empty;

    protected override void OnInitialized()
    {
        QuestService.OnQuestStateChanged += () => InvokeAsync(StateHasChanged);
        CombatManager.OnCombatStateChanged += () => InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        QuestService.OnQuestStateChanged -= () => InvokeAsync(StateHasChanged);
        CombatManager.OnCombatStateChanged -= () => InvokeAsync(StateHasChanged);
    }

    private async Task HandleContextMenuAction(ActionInfo actionInfo)
    {
        if (CombatManager.ActiveHero != null)
        {
            await CombatManager.HeroPerformsActionAsync(actionInfo.ActionType, actionInfo.Target, actionInfo.SecondaryTarget);
        }
    }

    private async Task HandleActionButtonClick(ActionType actionType)
    {
        switch (actionType)
        {
            case ActionType.EndTurn:
                await CombatManager.HeroPerformsActionAsync(actionType, null);
                _feedbackMessage = string.Empty;
                break;
        }
    }


    private void HandleMonsterClick(Monster monster)
    {
        //TODO: use this to display a box of information about the Monster clicked
    }

    private void HandleHeroClick(Hero hero)
    {
        if (CombatManager.IsAwaitingHeroSelection)
        {
            PartyManager.SelectedHero = PartyManager.Party?.Heroes.FirstOrDefault(h => h == hero);
            CombatManager.SetActiveHeroAsync(hero);
        }
    }

    private void HandleCombatCompletion(bool wasVictorious)
    {
        if (wasVictorious)
        {
            isAftermathVisible = true;
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void HandleAftermathComplete()
    {
        isAftermathVisible = false;
        NavigationManager.NavigateTo("/settlement");
    }

    private async Task StartCombat()
    {
        _isQuestInfoVisible = false;
        await CombatManager.StartFirstTurnAsync();
        StateHasChanged();
    }

    private void ContinueAdventure()
    {
        NavigationManager.NavigateTo("/party/shop");
    }

    private void ReturnToMenu()
    {
        NavigationManager.NavigateTo("/");
    }
}