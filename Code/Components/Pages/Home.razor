@page "/"
@using LoDCompanion.Code.BackEnd.Services.Game
@inject GameStateManagerService GameManager
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>League of Dungeoneers</PageTitle>

<div class="container-fluid vh-100 d-flex flex-column justify-content-center align-items-center text-center text-white">

    <div class="p-5 rounded" style="background-color: rgba(0, 0, 0, 0.5);">
        <h1 class="display-3 fw-bold">League of Dungeoneers</h1>
        <p class="lead fs-4">Your epic journey of peril and treasure awaits.</p>
        <hr class="my-4 bg-light">

        <p class="fs-5">The path is open. Will you forge a new destiny, or continue a tale already begun?</p>

        <div class="d-grid gap-2 d-sm-flex justify-content-sm-center mt-4">

            @if (GameManager.HasSavedGame)
            {
                <button class="btn btn-success btn-lg px-4 gap-3" @onclick="ContinueGame">
                    <i class="fas fa-book-open"></i> Continue Adventure
                </button>
            }

            <button class="btn btn-outline-light btn-lg px-4" @onclick="StartNewParty">
                <i class="fas fa-users"></i> @(GameManager.HasSavedGame ? "Start a New Legend" : "Forge Your Party")
            </button>
        </div>
    </div>

    <footer class="mt-auto text-white-50 p-3">
        <p>&copy; @DateTime.Now.Year - ChaoticSpace</p>
    </footer>
</div>

@code {
    protected override void OnInitialized()
    {
        GameManager.OnStateChanged += HandleStateChanged;
    }

    private async Task StartNewParty()
    {
        await GameManager.StartNewGameAsync();
        Navigation.NavigateTo("/character-creator");
    }

    private void ContinueGame()
    {
        // Navigate to the last known location or a default page
        if (!string.IsNullOrEmpty(GameManager.GameState.CurrentLocationUrl))
        {
            Navigation.NavigateTo(GameManager.GameState.CurrentLocationUrl);
        }
        else
        {
            Navigation.NavigateTo("/party/shop"); // Default fallback
        }
    }

    private void HandleStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        GameManager.OnStateChanged -= HandleStateChanged;
    }
}