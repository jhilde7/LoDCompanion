@using LoDCompanion.Models.Dungeon
@using LoDCompanion.Services.Dungeon
@using LoDCompanion.Services.Game
@using LoDCompanion.Utilities
@using LoDCompanion.Models.Character
@using LoDCompanion.Components.Shared

@inject RoomService RoomService
@inject FloatingTextService FloatingTextService
@inject DiceRollService DiceRollService

<style>

    .grid-container {
        position: relative;
        border: 2px solid #5a4d3a;
        background-image: url('/images/backgrounds/grass_tile.png'); /* Example background */
        background-size: 128px 128px;
    }

    .grid-item {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        box-sizing: border-box; /* Ensures padding and border are included in the element's total width and height */
        color: white;
        text-shadow: 1px 1px 2px black;
    }

    .furniture-item {
        background-color: rgba(139, 69, 19, 0.5); /* Brownish, semi-transparent */
        border: 1px dashed #654321;
    }

    .monster-item, .hero-item {
        /* Flexbox helps arrange the name and HP bar vertically */
        display: flex;
        flex-direction: column;
        justify-content: space-between; /* Pushes name to top, hp to bottom */
        align-items: center;
        /* Visuals */
        border: 1px solid #1a1a1a;
        box-sizing: border-box;
        color: white;
        text-shadow: 1px 1px 2px black; /* Makes text more readable */
        font-weight: bold;
        overflow: hidden; /* Ensures content doesn't spill out */
    }

    .monster-item {
        background-color: rgba(178, 34, 34, 0.85); /* A semi-transparent red (Firebrick) */
    }

    .hero-item {
        background-color: rgba(46, 139, 87, 0.85); /* A semi-transparent green (Seagreen) */
    }

    .item-label {
        padding-top: 4px; /* Give the name some space from the top edge */
    }

    .hp-bar {
        height: 6px;
        background-color: #dc3545; /* Default red for monster HP */
        border-top: 1px solid #1a1a1a;
        align-self: stretch; /* Makes the bar span the full width */
    }

    .hero-item .hp-bar {
        background-color: #198754; /* Override with green for hero HP */
    }
</style>

<div class="grid-container" style="@GridStyle">
    @if (Room != null)
    {
        @foreach (var furniture in Room.FurnitureList)
        {
            if (furniture.OccupiedSquares != null)
            {
                @foreach (var square in furniture.OccupiedSquares)
                {
                    <ContextMenuTrigger MenuId="gridActionsMenu" Data="square" WrapperTag="div"
                    class="grid-background-square" title="@furniture.ToString()" style="@GetSquareStyle(square)">
                    </ContextMenuTrigger>
                }
            }
        }

        @if (Room.MonstersInRoom != null)
        {
            @foreach (var monster in Room.MonstersInRoom)
            {
                <ContextMenuTrigger MenuId="attackActionsMenu" Data="monster" WrapperTag="div"
                class="grid-item monster-item" title="@monster.ToString()" style="@GetItemStyle(monster)"
                @onclick="() => OnMonsterClicked.InvokeAsync(monster)">
                    <div class="item-label">@monster.Name</div>
                    <div class="hp-bar" style="width: @(monster.CurrentHP * 100.0 / monster.MaxHP)%"></div>
                </ContextMenuTrigger>
            }
        }

        @if (Room.HeroesInRoom != null)
        {
            @foreach (var hero in Room.HeroesInRoom)
            {
                <div class="grid-item hero-item" title="@hero.ToString()" style="@GetItemStyle(hero)"
                @onclick="() => OnHeroClicked.InvokeAsync(hero)">
                    <div class="item-label">@hero.Name</div>
                    <div class="hp-bar" style="width: @(hero.CurrentHP * 100.0 / hero.MaxHP)%"></div>
                </div>
            }
        }

        @foreach (var text in FloatingTextService.ActiveTexts)
        {
            <div class="floating-text @text.CssClass" style="@GetItemStyleFromPosition(text.Position)">
                @text.Text
            </div>
        }

        @if (DiceRollService.CurrentRequest != null)
        {
            <DiceRollModal />
        }
    }
</div>

@code {
    [Parameter]
    public FloatingText Text { get; set; } = new();
    [Parameter]
    public Room? Room { get; set; }
    [Parameter]
    public EventCallback<Monster> OnMonsterClicked { get; set; }
    [Parameter]
    public EventCallback<Hero> OnHeroClicked { get; set; }

    private Action? _onTextChangedHandler;
    private Action? _onDiceRolledHandler;

    private string GridStyle
    {
        get
        {
            if (Room == null) return "";
            var style = $"position: relative; width: 90vmin; max-width: 1200px; aspect-ratio: {Room.Width} / {Room.Height};";
            if (!string.IsNullOrEmpty(Room.ImagePath))
            {
                style += $" background-image: url('{Room.ImagePath}'); background-size: 100% 100%; background-position: center;";
            }
            return style;
        }
    }

    private string GetItemStyle(IGameEntity entity)
    {
        if (Room == null)
        {
            return "";
        }

        if (entity.OccupiedSquares != null && entity.OccupiedSquares.Any())
        {
            // The entity's OccupiedSquares are in WORLD coordinates.
            // Convert them to LOCAL coordinates for rendering.
            var minWorldX = entity.OccupiedSquares.Min(p => p.X);
            var minWorldY = entity.OccupiedSquares.Min(p => p.Y);
            var localX = minWorldX - Room.GridOffset.X;
            var localY = minWorldY - Room.GridOffset.Y;

            // Calculate the bounding box size in grid units.
            var maxWorldX = entity.OccupiedSquares.Max(p => p.X);
            var maxWorldY = entity.OccupiedSquares.Max(p => p.Y);
            var widthInTiles = (maxWorldX - minWorldX) + 1;
            var heightInTiles = (maxWorldY - minWorldY) + 1;

            return GetPercentageStyle(localX, localY, widthInTiles, heightInTiles);
        }

        // If OccupiedSquares is empty, try using the entity's single anchor position.
        if (entity.Position != null)
        {
            return GetSquareStyle(entity.Position);
        }

        // If both checks fail, return an empty style.
        return "";
    }

    private string GetSquareStyle(GridPosition position)
    {
        if (Room == null) return "";

        // Calculate position and size as percentages for a single square.
        // The position is in WORLD coordinates. Convert to LOCAL for rendering.
        var localX = position.X - Room.GridOffset.X;
        var localY = position.Y - Room.GridOffset.Y;
        return GetPercentageStyle(localX, localY, 1, 1);
    }

    private string GetPercentageStyle(int x, int y, int widthInTiles, int heightInTiles)
    {
        if (Room?.Width is null or 0 || Room?.Height is null or 0)
        {
            return "";
        }

        // Use double for calculations to avoid integer division and ensure precision.
        double roomWidth = Room.Width;
        double roomHeight = Room.Height;

        double left = x / roomWidth * 100;
        double top = y / roomHeight * 100;
        double width = widthInTiles / roomWidth * 100;
        double height = heightInTiles / roomHeight * 100;

        // Use InvariantCulture to ensure '.' is used as the decimal separator in CSS, regardless of server culture.
        FormattableString style = $"position: absolute; left: {left}%; top: {top}%; width: {width}%; height: {height}%;";
        return style.ToString(System.Globalization.CultureInfo.InvariantCulture);
    }

    // You'll need a helper method to position the text
    private string GetItemStyleFromPosition(GridPosition position)
    {
        // This can use your existing GetPercentageStyle logic
        var localX = position.X - (Room?.GridOffset.X ?? 0);
        var localY = position.Y - (Room?.GridOffset.Y ?? 0);
        return GetPercentageStyle(localX, localY, 1, 1);
    }

    protected override void OnInitialized()
    {
        // Store the handler in a field.
        _onTextChangedHandler = () => InvokeAsync(StateHasChanged);
        _onDiceRolledHandler = () => InvokeAsync(StateHasChanged);
        // Subscribe using the stored handler.
        FloatingTextService.OnTextChanged += _onTextChangedHandler;
		DiceRollService.OnRollRequested += _onDiceRolledHandler;
    }

    public void Dispose()
    {
        FloatingTextService.OnTextChanged -= _onTextChangedHandler;
        DiceRollService.OnRollRequested -= _onDiceRolledHandler;
    }
}