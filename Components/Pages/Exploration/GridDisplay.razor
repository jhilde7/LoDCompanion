@using LoDCompanion.Models.Dungeon
@using LoDCompanion.Services.Dungeon
@using LoDCompanion.Services.Game
@using LoDCompanion.Models.Character

@inject RoomService RoomService

<div class="grid-container" style="@GridStyle">
    @if (Room != null)
    {
        @foreach (var furniture in Room.FurnitureList)
        {
            if (furniture.OccupiedSquares != null)
            {
                @foreach (var square in furniture.OccupiedSquares)
                {
                    <ContextMenuTrigger MenuId="gridActionsMenu" Data="square" WrapperTag="div"
                                        class="grid-background-square" style="@GetSquareStyle(square)">
                    </ContextMenuTrigger>
                }
            }
        }

        @if (Room.MonstersInRoom != null)
        {
            @foreach (var monster in Room.MonstersInRoom)
            {
                <ContextMenuTrigger MenuId="attackActionsMenu" Data="monster" WrapperTag="div"
                                    class="grid-item monster-item" style="@GetItemStyle(monster)">
                    <div class="item-label">@monster.Name</div>
                    <div class="hp-bar" style="width: @(monster.CurrentHP * 100.0 / monster.MaxHP)%"></div>
                </ContextMenuTrigger>
            }
        }

        @if (Room.HeroesInRoom != null)
        {
            @foreach (var hero in Room.HeroesInRoom)
            {
                <div class="grid-item hero-item" title="@hero.ToString()" style="@GetItemStyle(hero)"
                     @onclick="() => OnHeroClicked.InvokeAsync(hero)">
                    <div class="item-label">@hero.Name</div>
                    <div class="hp-bar" style="width: @(hero.CurrentHP * 100.0 / hero.MaxHP)%"></div>
                </div>
            }
        }
    }
</div>

@code {
    [Parameter]
    public Room? Room { get; set; }
    [Parameter]
    public EventCallback<Hero> OnHeroClicked { get; set; }

    private string GridStyle
    {
        get
        {
            if (Room == null) return "";
            var style = $"position: relative; width: 90vmin; max-width: 1200px; aspect-ratio: {Room.Width} / {Room.Height};";
            if (!string.IsNullOrEmpty(Room.ImagePath))
            {
                style += $" background-image: url('{Room.ImagePath}'); background-size: 100% 100%; background-position: center;";
            }
            return style;
        }
    }

    private string GetItemStyle(IGameEntity entity)
    {
        if (Room == null)
        {
            return "";
        }

        if (entity.OccupiedSquares != null && entity.OccupiedSquares.Any())
        {
            // The entity's OccupiedSquares are in WORLD coordinates.
            // Convert them to LOCAL coordinates for rendering.
            var minWorldX = entity.OccupiedSquares.Min(p => p.X);
            var minWorldY = entity.OccupiedSquares.Min(p => p.Y);
            var localX = minWorldX - Room.GridOffset.X;
            var localY = minWorldY - Room.GridOffset.Y;

            // Calculate the bounding box size in grid units.
            var maxWorldX = entity.OccupiedSquares.Max(p => p.X);
            var maxWorldY = entity.OccupiedSquares.Max(p => p.Y);
            var widthInTiles = (maxWorldX - minWorldX) + 1;
            var heightInTiles = (maxWorldY - minWorldY) + 1;

            return GetPercentageStyle(localX, localY, widthInTiles, heightInTiles);
        }

        // If OccupiedSquares is empty, try using the entity's single anchor position.
        if (entity.Position != null)
        {
            return GetSquareStyle(entity.Position);
        }

        // If both checks fail, return an empty style.
        return "";
    }

    private string GetSquareStyle(GridPosition position)
    {
        if (Room == null) return "";

        // Calculate position and size as percentages for a single square.
        // The position is in WORLD coordinates. Convert to LOCAL for rendering.
        var localX = position.X - Room.GridOffset.X;
        var localY = position.Y - Room.GridOffset.Y;
        return GetPercentageStyle(localX, localY, 1, 1);
    }

    private string GetPercentageStyle(int x, int y, int widthInTiles, int heightInTiles)
    {
        if (Room?.Width is null or 0 || Room?.Height is null or 0)
        {
            return "";
        }

        // Use double for calculations to avoid integer division and ensure precision.
        double roomWidth = Room.Width;
        double roomHeight = Room.Height;

        double left = x / roomWidth * 100;
        double top = y / roomHeight * 100;
        double width = widthInTiles / roomWidth * 100;
        double height = heightInTiles / roomHeight * 100;

        // Use InvariantCulture to ensure '.' is used as the decimal separator in CSS, regardless of server culture.
        FormattableString style = $"position: absolute; left: {left}%; top: {top}%; width: {width}%; height: {height}%;";
        return style.ToString(System.Globalization.CultureInfo.InvariantCulture);
    }
}