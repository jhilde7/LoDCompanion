<h3>GridDisplay</h3>

@using LoDCompanion.Models.Dungeon
@using LoDCompanion.Services.Dungeon
@using LoDCompanion.Services.Game

@inject RoomService RoomService

<div class="grid-container" style="@GridStyle">
    @if (Room != null)
    {
        @foreach (var furniture in Room.FurnitureList)
        {
            <div class="grid-item furniture-item" style="@GetItemStyle(furniture)">
                <div class="item-label">@furniture.Name</div>
            </div>
        }

        @if (Room.MonstersInRoom != null)
        {
            @foreach (var monster in Room.MonstersInRoom)
            {
                <div class="grid-item monster-item" style="@GetItemStyle(monster)">
                    <div class="item-label">@monster.Name</div>
                    <div class="hp-bar" style="width: @(monster.CurrentHP * 100.0 / monster.MaxHP)%"></div>
                </div>
            }
        }

        @if (Room.HeroesInRoom != null)
        {
            @foreach (var hero in Room.HeroesInRoom)
            {
                <div class="grid-item hero-item" style="@GetItemStyle(hero)">
                    <div class="item-label">@hero.Name</div>
                    <div class="hp-bar" style="width: @(hero.CurrentHP * 100.0 / hero.MaxHP)%"></div>
                </div>
            }
        }
    }
</div>

@code {
    [Parameter]
    public Room? Room { get; set; }

    private string GridStyle => Room != null
        ? $"display: grid; grid-template-columns: repeat({Room.Width}, {RoomService.TilePixelWidth}px); grid-template-rows: repeat({Room.Height}, {RoomService.TilePixelHeight}px);"
        : "";

    private string GetItemStyle(IGameEntity entity)
    {
        if (Room == null) return "";

        var point = RoomService.GetPixelCoordinateForGridPosition(entity.Position, Room);

        // Assumes IGameEntity has SizeX and SizeY properties
        var width = (entity as IHasSize)?.SizeX ?? 1;
        var height = (entity as IHasSize)?.SizeY ?? 1;

        return $"position: absolute; left: {point.X}px; top: {point.Y}px; width: {width * RoomService.TilePixelWidth}px; height: {height * RoomService.TilePixelHeight}px;";
    }

    // Helper interface to get size for multi-tile entities
    public interface IHasSize
    {
        int SizeX { get; }
        int SizeY { get; }
    }
}