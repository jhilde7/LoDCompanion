@using LoDCompanion.Models.Dungeon
@using LoDCompanion.Services.Dungeon
@using LoDCompanion.Services.Game

@inject RoomService RoomService

<div class="grid-container" style="@GridStyle">
    @if (Room != null)
    {
        @* Render furniture as individual, interactive overlay squares *@
        @foreach (var furniture in Room.FurnitureList)
        {
            if (furniture.OccupiedSquares != null)
            {
                @foreach (var square in furniture.OccupiedSquares)
                {
                    <div class="grid-item furniture-overlay-square" title="@furniture.ToString()" style="@GetSquareStyle(square)">
                        @* This div is the interactive overlay for one part of the furniture. *@
                        @* It can be styled with CSS for hover effects or clickability. *@
                    </div>
                }
            }
        }

        @if (Room.MonstersInRoom != null)
        {
            @foreach (var monster in Room.MonstersInRoom)
            {
                <div class="grid-item monster-item" title="@monster.ToString()" style="@GetItemStyle(monster)">
                    <div class="item-label">@monster.Name</div>
                    <div class="hp-bar" style="width: @(monster.CurrentHP * 100.0 / monster.MaxHP)%"></div>
                </div>
            }
        }

        @if (Room.HeroesInRoom != null)
        {
            @foreach (var hero in Room.HeroesInRoom)
            {
                <div class="grid-item hero-item" title="@hero.ToString()" style="@GetItemStyle(hero)">
                    <div class="item-label">@hero.Name</div>
                    <div class="hp-bar" style="width: @(hero.CurrentHP * 100.0 / hero.MaxHP)%"></div>
                </div>
            }
        }
    }
</div>

@code {
    [Parameter]
    public Room? Room { get; set; }

    private string GridStyle
    {
        get
        {
            if (Room == null)
            {
                return "";
            }

            // Base styles for the grid layout. 'position: relative' is crucial for the absolutely positioned children.
            var style = $"position: relative; width: 90vmin; max-width: 1200px; aspect-ratio: {Room.Width} / {Room.Height};";
            // Add the background image if the URL is provided on the Room object.
            if (!string.IsNullOrEmpty(Room.ImagePath))
            {
                style += $" background-image: url('{Room.ImagePath}'); background-size: 100% 100%; background-position: center;";
            }

            return style;
        }
    }

    private string GetItemStyle(IGameEntity entity)
    {
        if (Room == null || entity.OccupiedSquares == null || !entity.OccupiedSquares.Any())
        {
            return "";
        }

        // Find the min and max coordinates to define the bounding box of the entity.
        var minX = entity.OccupiedSquares.Min(p => p.X);
        var minY = entity.OccupiedSquares.Min(p => p.Y);


        // Calculate the width and height of the bounding box in grid units.
        var maxX = entity.OccupiedSquares.Max(p => p.X);
        var maxY = entity.OccupiedSquares.Max(p => p.Y);
        var widthInTiles = (maxX - minX) + 1;
        var heightInTiles = (maxY - minY) + 1;

        // Return the final CSS style string.
        return GetPercentageStyle(minX, minY, widthInTiles, heightInTiles);
    }

    private string GetSquareStyle(GridPosition position)
    {
        if (Room == null) return "";

        // Calculate position and size as percentages for a single square.
        return GetPercentageStyle(position.X, position.Y, 1, 1);
    }

    private string GetPercentageStyle(int x, int y, int widthInTiles, int heightInTiles)
    {
        if (Room == null || Room.Width == 0 || Room.Height == 0) return "";

        var left = (double)x / Room.Width * 100;
        var top = (double)y / Room.Height * 100;
        var width = (double)widthInTiles / Room.Width * 100;
        var height = (double)heightInTiles / Room.Height * 100;

        // Use InvariantCulture to ensure '.' is used as the decimal separator in CSS, regardless of server culture.
        return $"position: absolute; left: {left.ToString(System.Globalization.CultureInfo.InvariantCulture)}%; top: {top.ToString(System.Globalization.CultureInfo.InvariantCulture)}%; width: {width.ToString(System.Globalization.CultureInfo.InvariantCulture)}%; height: {height.ToString(System.Globalization.CultureInfo.InvariantCulture)}%;";
    }
}