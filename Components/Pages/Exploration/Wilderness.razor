@page "/wilderness"
@rendermode InteractiveServer

@using LoDCompanion.Services.Player
@using LoDCompanion.Services.Dungeon
@using LoDCompanion.Services.Game
@using LoDCompanion.Models.Character
@using LoDCompanion.Components
@using LoDCompanion.Components.Shared

@inject QuestService QuestService
@inject CombatManagerService CombatManager
@inject RoomService RoomService

<div class="wilderness-container">
    @if (QuestService.IsQuestActive &&
      QuestService.ActiveQuest?.QuestType == QuestType.WildernessQuest &&
      QuestService.ActiveEncounterRoom != null)
    {
        <div class="quest-header">
            <h1>@QuestService.ActiveQuest.Name</h1>
            <p class="narrative-text"><em>@QuestService.ActiveQuest.NarrativeQuest</em></p>
            @if (!string.IsNullOrEmpty(QuestService.ActiveQuest.SpecialRules))
            {
                <p><strong>Special Rules:</strong> @QuestService.ActiveQuest.SpecialRules</p>
            }
        </div>

        <div class="game-area">
            <GridDisplay Room="QuestService.ActiveEncounterRoom"
                         OnMonsterClicked="HandleMonsterClick"
                         OnGridSquareClicked="HandleGridSquareClick"
                         OnHeroClicked="HandleHeroClick" />
        </div>

        <div class="combat-ui">
            <CombatInterface FeedbackMessage="@_feedbackMessage"
                             OnActionButtonClicked="HandleActionButtonClick" />
        </div>
    }
    else
    {
        <div class="no-quest-active">
            <h3>The wilderness is quiet... for now.</h3>
            <p>Your journey continues uneventfully.</p>
        </div>
    }
</div>

@code {
    private enum InputState
    {
        AwaitingAction,
        SelectingTarget,
        SelectingDestination
    }

    private bool _isFirstRender = true;
    private CombatInterface? _combatInterface;
    private InputState _currentInputState = InputState.AwaitingAction;
    private string _feedbackMessage = string.Empty;

    private void HandleActionButtonClick(PlayerActionType actionType)
    {
        switch (actionType)
        {
            case PlayerActionType.StandardAttack:
                _currentInputState = InputState.SelectingTarget;
                _feedbackMessage = "Select a target to attack.";
                break;

            case PlayerActionType.Move:
                _currentInputState = InputState.SelectingDestination;
                _feedbackMessage = "Select a destination square.";
                break;

            case PlayerActionType.EndTurn:
                CombatManager.HeroPerformsAction(PlayerActionType.EndTurn, null);
                ResetInputState();
                break;
        }
    }

    private void HandleMonsterClick(Monster monster)
    {
        if (_currentInputState == InputState.SelectingTarget)
        {
            CombatManager.HeroPerformsAction(PlayerActionType.StandardAttack, monster);
            ResetInputState();
        }
    }

    private void HandleGridSquareClick(GridPosition position)
    {
        if (_currentInputState == InputState.SelectingDestination)
        {
            CombatManager.HeroPerformsAction(PlayerActionType.Move, position);
            ResetInputState();
        }
    }

    private void HandleHeroClick(Hero hero)
    {
        if (CombatManager.IsAwaitingHeroSelection)
        {
            CombatManager.SelectHeroToAction(hero);
        }
    }

    private void ResetInputState()
    {
        _currentInputState = InputState.AwaitingAction;
        _feedbackMessage = string.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isFirstRender = false;
            CombatManager.StartFirstTurn();
        }
    }

    protected override void OnInitialized()
    {
        // Subscribe to the QuestService's event. When a quest starts,
        // this component will automatically re-render.
        QuestService.OnQuestStateChanged += StateHasChanged;
        CombatManager.OnCombatStateChanged += StateHasChanged; // Also listen for combat updates
    }

    // Always unsubscribe from events to prevent memory leaks when the component is destroyed.
    public void Dispose()
    {
        QuestService.OnQuestStateChanged -= StateHasChanged;
        CombatManager.OnCombatStateChanged -= StateHasChanged;
    }
}