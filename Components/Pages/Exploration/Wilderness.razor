@page "/wilderness"
@rendermode InteractiveServer

@using LoDCompanion.Services.Dungeon
@using LoDCompanion.Services.Game
@using LoDCompanion.Components
@using LoDCompanion.Components.Shared

@inject QuestService QuestService
@inject CombatManagerService CombatManager
@inject RoomService RoomService

<div class="wilderness-container">
    @if (QuestService.IsQuestActive &&
        QuestService.ActiveQuest?.QuestType == QuestType.WildernessQuest &&
        QuestService.ActiveEncounterRoom != null)
    {
        <div class="quest-header">
            <h1>@QuestService.ActiveQuest.Name</h1>
            <p class="narrative-text"><em>@QuestService.ActiveQuest.NarrativeQuest</em></p>
            @if (!string.IsNullOrEmpty(QuestService.ActiveQuest.SpecialRules))
            {
                <p><strong>Special Rules:</strong> @QuestService.ActiveQuest.SpecialRules</p>
            }
        </div>

        <div class="game-area">
            <GridDisplay Room="QuestService.ActiveEncounterRoom" />
        </div>

        <div class="combat-ui">
            <CombatInterface />
        </div>
    }
    else
    {
        <div class="no-quest-active">
            <h3>The wilderness is quiet... for now.</h3>
            <p>Your journey continues uneventfully.</p>
        </div>
    }
</div>

@code {
    protected override void OnInitialized()
    {
        // Subscribe to the QuestService's event. When a quest starts,
        // this component will automatically re-render.
        QuestService.OnQuestStateChanged += StateHasChanged;
        CombatManager.OnCombatStateChanged += StateHasChanged; // Also listen for combat updates
    }

    // Always unsubscribe from events to prevent memory leaks when the component is destroyed.
    public void Dispose()
    {
        QuestService.OnQuestStateChanged -= StateHasChanged;
        CombatManager.OnCombatStateChanged -= StateHasChanged;
    }
}