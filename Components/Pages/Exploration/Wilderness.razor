@page "/wilderness"
@rendermode InteractiveServer

@using LoDCompanion.Services.Player
@using LoDCompanion.Services.Dungeon
@using LoDCompanion.Services.Game
@using LoDCompanion.Models.Character
@using LoDCompanion.Components
@using LoDCompanion.Components.Shared

@inject QuestService QuestService
@inject CombatManagerService CombatManager
@inject RoomService RoomService

<div class="wilderness-container" >
    @if (QuestService.IsQuestActive &&
      QuestService.ActiveQuest?.QuestType == QuestType.WildernessQuest &&
      QuestService.ActiveEncounterRoom != null)
    {
        <div class="quest-header">
            <h1>@QuestService.ActiveQuest.Name</h1>
            <p class="narrative-text"><em>@QuestService.ActiveQuest.NarrativeQuest</em></p>
            @if (!string.IsNullOrEmpty(QuestService.ActiveQuest.SpecialRules))
            {
                <p><strong>Special Rules:</strong> @QuestService.ActiveQuest.SpecialRules</p>
            }
        </div>

        <div class="game-area">
            <GridDisplay Room="QuestService.ActiveEncounterRoom"
                         OnHeroClicked="HandleHeroClick" />
        </div>

        <div class="combat-ui">
            <CombatInterface FeedbackMessage="@_feedbackMessage"
                             OnActionButtonClicked="HandleActionButtonClick" />
        </div>
    }
    else
    {
        <div class="no-quest-active">
            <h3>The wilderness is quiet... for now.</h3>
            <p>Your journey continues uneventfully.</p>
        </div>
    }
</div>

<ContextMenu Id="gridActionsMenu">
    <Item OnClick="@(args => HandleMoveClicked(args))">Move (1AP)</Item>
    @* Add other potential actions here *@
</ContextMenu>

<ContextMenu Id="attackActionsMenu">
    <Item OnClick="@(args => HandleAttackClicked(args))">Attack (1AP)</Item>
    <Item OnClick="@(args => HandlePowerAttackClicked(args))">Power Attack (2 AP)</Item>
    @* Add other potential actions here *@
</ContextMenu>

@code {
    private enum InputState
    {
        AwaitingAction,
        SelectingTarget,
        SelectingDestination
    }
    private List<PlayerActionInfo> _availableActions = new();

    private InputState _currentInputState = InputState.AwaitingAction;
    private string _feedbackMessage = string.Empty;

    private void HandleActionButtonClick(PlayerActionType actionType)
    {
        switch (actionType)
        {
            case PlayerActionType.EndTurn:
                CombatManager.HeroPerformsAction(PlayerActionType.EndTurn);
                ResetInputState();
                break;
        }
    }

    private void HandleAttackClicked(ItemClickEventArgs args)
    {
        // The clicked monster is passed in the Data property.
        if (args.Data is Monster targetMonster)
        {
            CombatManager.HeroPerformsAction(PlayerActionType.StandardAttack, targetMonster);
        }
    }

    private void HandlePowerAttackClicked(ItemClickEventArgs args)
    {
        if (args.Data is Monster target)
        {
            CombatManager.HeroPerformsAction(PlayerActionType.PowerAttack, target);
        }
    }

    private void HandleMoveClicked(ItemClickEventArgs args)
    {
        // The clicked grid position is passed in the Data property.
        if (args.Data is GridPosition targetPosition)
        {
            CombatManager.HeroPerformsAction(PlayerActionType.Move, targetPosition);
        }
    }

    
    private void HandleMonsterClick(Monster monster)
    {
        //TODO: use this to display a box of information about the Monster clicked
    }

    private void HandleGridSquareClick(GridPosition position)
    {
        if (_currentInputState == InputState.SelectingDestination)
        {
            CombatManager.HeroPerformsAction(PlayerActionType.Move, position);
            ResetInputState();
        }
    }

    private void HandleHeroClick(Hero hero)
    {
        if (CombatManager.IsAwaitingHeroSelection)
        {
            CombatManager.SelectHeroToAction(hero);
        }
    }

    private void ResetInputState()
    {
        _currentInputState = InputState.AwaitingAction;
        _feedbackMessage = string.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CombatManager.StartFirstTurn();
        }
    }

    protected override void OnInitialized()
    {
        QuestService.OnQuestStateChanged += () => InvokeAsync(StateHasChanged);
        CombatManager.OnCombatStateChanged += () => InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        QuestService.OnQuestStateChanged -= () => InvokeAsync(StateHasChanged);
        CombatManager.OnCombatStateChanged -= () => InvokeAsync(StateHasChanged);
    }
}