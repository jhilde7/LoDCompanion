@page "/character-creator"
@rendermode InteractiveServer
@implements IDisposable

@using Microsoft.JSInterop
@using LoDCompanion.Components.Shared
@using LoDCompanion.Utilities
@using LoDCompanion.Models
@using LoDCompanion.Models.Character
@using LoDCompanion.Services.CharacterCreation
@using LoDCompanion.Services.GameData
@using LoDCompanion.Services.Player
@using LoDCompanion.Services.Game
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject CharacterCreationService CreationService
@inject GameDataService GameData
@inject PartyManagerService PartyManager
@inject GameStateManagerService GameManager

<PageTitle>Create Your Hero</PageTitle>


@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 300px;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="ms-3">Loading Game Data...</p>
    </div>
}
else
{
    <div class="row">
        <!-- Main Creation Area -->
        <div class="col-md-9">
            <h1>Create Your Hero (@(PartyManager.Party?.Heroes.Count + 1) of 4)</h1>
            <!-- Progress Bar -->
            <span class="progress" style="height: 25px;">
                <div class="progress-bar @GetProgressClass(Step.Species)" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 22%; cursor: pointer;" @onclick="() => SetStep(Step.Species)">Species</div>
                <div class="progress-bar @GetProgressClass(Step.Profession)" role="progressbar" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100" style="width: 44%; cursor: pointer;" @onclick="() => SetStep(Step.Profession)">Profession</div>
                <div class="progress-bar @GetProgressClass(Step.Background)" role="progressbar" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100" style="width: 88%;" @onclick="() => SetStep(Step.Background)">Background</div>
                <div class="progress-bar @GetProgressClass(Step.Name)" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: 11%; cursor: pointer;" @onclick="() => SetStep(Step.Name)">Name</div>
                <div class="progress-bar @GetProgressClass(Step.Review)" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%;" @onclick="() => SetStep(Step.Review)">Review</div>
            </span>
            <!-- Main Content -->
            @if (currentStep != Step.Summary)
            {
                <div class="character-creation-content p-3 border rounded">
                    <EditForm EditContext="editContext">
                        <DataAnnotationsValidator />

                        @switch (currentStep)
                        {
                            case Step.Species:
                                @SpeciesSelection
                                ;
                                break;
                            case Step.HumanTalent:
                                @HumanTalentSelection
                                ;
                                break;
                            case Step.Specialization:
                                @SpecializationStats
                                ;
                                break;
                            case Step.Profession:
                                @ProfessionSelection
                                ;
                                break;
                            case Step.TalentChoice:
                                @TalentChoiceSelection
                                ;
                                break;
                            case Step.Equipment:
                                @EquipmentSelection
                                ;
                                break;
                            case Step.AlchemistRecipe:
                                @AlchemistRecipeSelection
                                ; break;
                            case Step.FreeSkill:
                                @FreeSkillSelection
                                ;
                                break;
                            case Step.Background:
                                @BackgroundSelection
                                ;
                                break;
                            case Step.Name:
                                @NameSelection
                                ;
                                break;
                            case Step.Review:
                                @CharacterReview
                                ;
                                break;
                            case Step.Summary:
                                @CharacterSummary
                                ;
                                break;
                        }
                    </EditForm>
                </div>
            }
            else
            {
                @CharacterSummary
            }

            <!-- Navigation Buttons -->
            <div class="mt-4 d-flex justify-content-between">
                <button class="btn btn-secondary" @onclick="GoToPreviousStep" disabled="@(currentStep == Step.Name)">Back</button>

                @if (currentStep == Step.Review)
                {
                    <button class="btn btn-success" @onclick="FinishCreation" disabled="@(!IsCurrentStepValid())">Finish Character</button>
                }
                else if (currentStep != Step.Summary)
                {
                    <button class="btn btn-primary" @onclick="GoToNextStep" disabled="@(!IsCurrentStepValid())">Next</button>
                }
            </div>
        </div>
        <!-- Party Roster Side Panel -->
        <div class="col-md-3">
            <div class="card sticky-top" style="top: 1rem;">
                <div class="card-header">
                    <h5>Current Party (@PartyManager.Party?.Heroes.Count / 4)</h5>
                </div>
                <ul class="list-group list-group-flush">
                    @if (PartyManager.Party != null && PartyManager.Party.Heroes.Any())
                    {
                        @foreach (var hero in PartyManager.Party.Heroes)
                        {
                            <button type="button" class="list-group-item list-group-item-action text-start" @onclick="() => ShowCharacterSheet(hero)">
                                @hero.Name <br /><small class="text-muted">@hero.SpeciesName @hero.ProfessionName</small>
                            </button>
                        }
                    }
                    else
                    {
                        <li class="list-group-item">Your party is empty.</li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <CharacterSheet @ref="characterSheetModal" Hero="selectedHeroForSheet" />
}
    @code {
    private enum Step { Species, HumanTalent, Specialization, Profession, TalentChoice, Equipment, AlchemistRecipe, FreeSkill, Background, Name, Review, Summary }
    private Step currentStep = Step.Species;
    private EditContext editContext = default!;
    private bool isLoading = true; // Start in loading state

    private int[] manualRolls = new int[6];
    private string? humanTalentCategory;
    private Profession? selectedProfession;
    private string? selectedSkill;
    private bool isSkillConfirmed = false;
    private string? selectedTalentChoice;
    private CharacterCreationState State = new CharacterCreationState();

    private CharacterSheet characterSheetModal = default!;
    private Hero? selectedHeroForSheet;
    private Hero? currentHero;

    private List<Potion> AvailablePotions { get; set; } = new();
    private List<Part> AvailableParts { get; set; } = new();

    private Dictionary<string, int> SelectedPotions { get; set; } = new();
    private Dictionary<string, int> SelectedParts { get; set; } = new();

    private const int MaxSelections = 3;

    private int TotalPotionsSelected => SelectedPotions.Values.Sum();
    private int TotalPartsSelected => SelectedParts.Values.Sum();

    protected override async Task OnInitializedAsync()
    {
        if (PartyManager.Party != null && PartyManager.Party.Heroes.Count >= 4)
        {
            // If the party is full, just show the summary view and stop.
            // The summary view already has the "Go to Shop" button.
            currentStep = Step.Summary;
            isLoading = false;
            return;
        }

        if (PartyManager.Party == null)
        {
            // This method should create a new empty party object.
            PartyManager.CreateParty();
        }

        try
        {
            await Task.Delay(1);
            editContext = new(CreationService);
            editContext.OnFieldChanged += HandleFieldChanged;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to initialize Character Creator: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override void OnInitialized()
    {
        AvailablePotions = AlchemyService.StandardPotions;
        AvailableParts = AlchemyService.Parts;
        State = CreationService.State;
    }

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    #region Render Fragments for Each Step

    private RenderFragment SpeciesSelection =>@<section>
        <h2 class="text-center my-4">Choose Your Species</h2>

        @{
            <div class="row">
                @foreach (var species in GameData.Species)
                {
                <div class="card mb-4 shadow-sm selectable-card @(State.SelectedSpecies == species ? "selected" : "")" @onclick="() => SelectSpecies(species)">
                        <div class="card-body">
                            <h5 class="card-title">@species.Name</h5>
                            <p class="card-text">@species.Description</p>
                            <div>
                                <strong title=@TooltipHelper.GetTooltip("STR")>STR:</strong> @species.BaseStrength,
                                <strong title=@TooltipHelper.GetTooltip("CON")>CON:</strong> @species.BaseConstitution,
                                <strong title=@TooltipHelper.GetTooltip("DEX")>DEX:</strong> @species.BaseDexterity,
                                <strong title=@TooltipHelper.GetTooltip("WIS")>WIS:</strong> @species.BaseWisdom,
                                <strong title=@TooltipHelper.GetTooltip("RES")>RES:</strong> @species.BaseResolve,
                                <strong title=@TooltipHelper.GetTooltip("HP")>HP:</strong> @species.BaseHitPoints
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

        @if (CreationService.IsSpeciesPicked)
        {
            <hr class="my-4" />
            <h4>Your Rolled Stats</h4>
            <p>The application has automatically rolled stats. Accept these or enter your own below.</p>

            <div class="card mb-4"><div class="card-header">Current Stats</div>
                <div class="card-body">
                    <div class="row">
                        <div class="col"><strong>STR:</strong> @State.Strength</div>
                        <div class="col"><strong>CON:</strong> @State.Constitution</div>
                        <div class="col"><strong>DEX:</strong> @State.Dexterity</div>
                        <div class="col"><strong>WIS:</strong> @State.Wisdom</div>
                        <div class="col"><strong>RES:</strong> @State.Resolve</div>
                        <div class="col"><strong>HP:</strong>  @State.BaseHP</div>
                    </div>
                </div>
            </div>

            <div class="card"><div class="card-body">
                <h5 class="card-title">Manual Roll Entry</h5>
                <div class="row g-2">
                    <div class="col"><label class="form-label-sm">STR (d10)</label><InputNumber id="manual-str" class="form-control form-control-sm" @bind-Value="manualRolls[0]" @onclick='() => SelectAllText("manual-str")' /></div>
                    <div class="col"><label class="form-label-sm">CON (d10)</label><InputNumber id="manual-con" class="form-control form-control-sm" @bind-Value="manualRolls[1]" @onclick='() => SelectAllText("manual-con")' /></div>
                    <div class="col"><label class="form-label-sm">DEX (d10)</label><InputNumber id="manual-dex" class="form-control form-control-sm" @bind-Value="manualRolls[2]" @onclick='() => SelectAllText("manual-dex")' /></div>
                    <div class="col"><label class="form-label-sm">WIS (d10)</label><InputNumber id="manual-wis" class="form-control form-control-sm" @bind-Value="manualRolls[3]" @onclick='() => SelectAllText("manual-wis")' /></div>
                    <div class="col"><label class="form-label-sm">RES (d10)</label><InputNumber id="manual-res" class="form-control form-control-sm" @bind-Value="manualRolls[4]" @onclick='() => SelectAllText("manual-res")' /></div>
                    <div class="col"><label class="form-label-sm">HP (d6)</label><InputNumber id="manual-hp" class="form-control form-control-sm" @bind-Value="manualRolls[5]" @onclick='() => SelectAllText("manual-hp")' /></div>
                </div>
                <button class="btn btn-info btn-sm mt-2" @onclick="ApplyManualRolls" disabled="@(!IsManualRollValid())">Apply Manual Rolls</button>
            </div></div>
        }
    </section>; 

    private RenderFragment HumanTalentSelection =>@<section>
        <h3 class="text-center my-4">Human Versatility</h3>
        <p>As a Human, you are a "Jack of all trades". This allows you to gain one random talent from a category of your choice. Please select a category.</p>

        <div class="list-group w-50 mx-auto">
            @if (State.HumanTalentCategoryList != null)
            {
                @foreach(var category in State.HumanTalentCategoryList)
                {
                    <label class="list-group-item list-group-item-action">
                        <input class="form-check-input me-2" type="radio" name="talentCategory"
                               value="@category"
                               @onchange="() => CreationService.SetHumanRandomTalent(category)"
                               checked="@(State.HumanTalentCategorySelection == category)" />
                        @category
                    </label>
                }
            }
        </div>

        @if (State.HumanTalentCategorySelection != null)
        {
            <div class="alert alert-success mt-3 w-50 mx-auto">
            <h5 class="alert-heading">Random Talent Gained!</h5>
            @{
            var gainedTalent = State.TalentList.Last();
            }
            <p class="mb-1">You have gained the talent: <strong>@gainedTalent.Name</strong></p>
            <hr>
            <p class="mb-0 fst-italic">@gainedTalent.Description</p>
        </div>
        }
    </section>;

    private RenderFragment SpecializationStats =>@<section>
        <h3 class="text-center my-4">Distribute Specialization Points</h3>

        @if (State.SelectedSpecies == null)
        {
            <p class="alert alert-warning">Please select a species first.</p>
        }
        else
        {
        <div class="container">
            <div class="row">
                <div class="col-sm">
                    <div class="card">
                        <div class="card-header">Damage Bonus (from Strength)</div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item d-flex justify-content-between"><span>STR 60:</span> <strong>+1</strong></li>
                            <li class="list-group-item d-flex justify-content-between"><span>STR 70:</span> <strong>+2</strong></li>
                            <li class="list-group-item d-flex justify-content-between"><span>STR 80:</span> <strong>+3</strong></li>
                        </ul>
                        </div>
                    </div>
                <div class="col-sm">
                    <div class="card">
                        <div class="card-header">Natural Armour (from Constitution)</div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item d-flex justify-content-between"><span>CON 50:</span> <strong>+1</strong></li>
                            <li class="list-group-item d-flex justify-content-between"><span>CON 55:</span> <strong>+2</strong></li>
                            <li class="list-group-item d-flex justify-content-between"><span>CON 60:</span> <strong>+3</strong></li>
                            <li class="list-group-item d-flex justify-content-between"><span>CON 65:</span> <strong>+4</strong></li>
                            <li class="list-group-item d-flex justify-content-between"><span>CON 70:</span> <strong>+5</strong></li>
                        </ul>
                    </div>
                </div>
            </div>
        <div class="container">
            <div class="row">
                <div class="col-sm">
                    <div class="card">
                        <div class="card-header">Strength and Weapon Class</div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item d-flex justify-content-between"><span>Class 1:</span> <strong>2H: 20</strong> <strong>1H: 20</strong></li>
                            <li class="list-group-item d-flex justify-content-between"><span>Class 2:</span> <strong>2H: 25</strong> <strong>1H: 30</strong></li>
                            <li class="list-group-item d-flex justify-content-between"><span>Class 3:</span> <strong>2H: 30</strong> <strong>1H: 40</strong></li>
                        </ul>
                    </div>
                </div>
                <div class="col-sm">
                    <div class="card">
                        <div class="card-header">Strength and Weapon Class</div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item d-flex justify-content-between"><span>Class 4:</span> <strong>2H: 40</strong> <strong>1H: 50</strong></li>
                            <li class="list-group-item d-flex justify-content-between"><span>Class 5:</span> <strong>2H: 55</strong> <strong>1H: N/A</strong></li>
                            <li class="list-group-item d-flex justify-content-between"><span>Class 6:</span> <strong>2H: 20</strong> <strong>1H: N/A</strong></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card text-center bg-light mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Points Remaining</h5>
                        <p class="display-4">@State.SpecializationBonus</p>
                    </div>
                </div>

            <div class="row align-items-center mb-3">
                <div class="col-md-4">
                        <label for="specAmount" class="form-label"><strong>Amount to Apply:</strong></label>
                        <InputNumber id="specAmount" class="form-control" @bind-Value="State.SpecializeAmount" @onclick='() => SelectAllText("specAmount")' />
                    @if (State.SpecializeAmount > State.SpecializationBonus)
                    {
                    <small class="text-danger">You cannot apply more points than you have remaining.</small>
                    }
                </div>
                <div class="col-md-8">
                    <button class="btn btn-warning mt-4 w-100" @onclick="ResetSpecialization">Reset All Points</button>
                </div>
            </div>

                <table class="table">
                    <thead class="table-light">
                        <tr>
                            <th>Statistic</th>
                            <th>Base</th>
                            <th>Added</th>
                            <th>Total</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                    @CreateStatRow("Strength", "STR",     State.Strength,     State.AddedStrength,     State.SpecializeAmount)
                    @CreateStatRow("Constitution", "CON", State.Constitution, State.AddedConstitution, State.SpecializeAmount)
                    @CreateStatRow("Dexterity", "DEX",    State.Dexterity,    State.AddedDexterity,    State.SpecializeAmount)
                    @CreateStatRow("Wisdom", "WIS",       State.Wisdom,       State.AddedWisdom,       State.SpecializeAmount)
                    @CreateStatRow("Resolve", "RES",      State.Resolve,      State.AddedResolve,      State.SpecializeAmount)
                    </tbody>
                </table>
            </div>
        </div>
        }
    </section>;

    private RenderFragment CreateStatRow(string statName, string statAbbr, int baseValue, int addedValue, int amountToApply) =>@<tr>
    <td title="@TooltipHelper.GetTooltip(statAbbr)">@statName</td>
        <td>@baseValue</td>
        <td>@addedValue</td>
        <td><strong>@(baseValue + addedValue)</strong></td>
        <td>
            <button class="btn btn-sm btn-success"
                    @onclick="() => CreationService.ApplySpecialization(statAbbr, State.SpecializeAmount)"
                disabled="@(State.SpecializeAmount <= 0 ||
                            State.SpecializeAmount > State.SpecializationBonus ||
                            addedValue >= 10 ||
                            addedValue + amountToApply > 10)">
                Apply
            </button>
        </td>
    </tr>;

    private RenderFragment ProfessionSelection =>@<section>
        <h3 class="text-center my-4">Choose Your Profession</h3>
        <div class="row">
            @if (GameData.Professions == null)
            {
                <p><em>Loading professions...</em></p>
            }
            else
            {
                @foreach (var profession in GameData.Professions)
                {
                    <div class="col-md-6 mb-6">
                        <div class="card h-100 selectable-card @(selectedProfession == profession ? "selected" : "")" @onclick="() => SelectProfession(profession)">
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@profession.Name</h5>
                                <p class="card-text"><small>@profession.Description</small></p>

                                    <div class="mt-auto">
                                        <p class="card-text mb-1 mt-2"><strong>Skill Modifiers:</strong></p>
                                        <div class="row g-2">
                                        <div class="col-6"><small title=@TooltipHelper.GetTooltip("Combat Skill")>Combat Skill: @profession.CombatSkillModifier.ToString("+#;-#;0")</small></div>
                                        <div class="col-6"><small title=@TooltipHelper.GetTooltip("Ranged Skill")>Ranged Skill: @profession.RangedSkillModifier.ToString("+#;-#;0")</small></div>
                                        <div class="col-6"><small title=@TooltipHelper.GetTooltip("Dodge")>Dodge: @profession.DodgeSkillModifier.ToString("+#;-#;0")</small></div>
                                        <div class="col-6"><small title=@TooltipHelper.GetTooltip("Pick Locks")>Pick Locks: @profession.PickLocksSkillModifier.ToString("+#;-#;0")</small></div>
                                        <div class="col-6"><small title=@TooltipHelper.GetTooltip("Barter")>Barter: @profession.BarterSkillModifier.ToString("+#;-#;0")</small></div>
                                        <div class="col-6"><small title=@TooltipHelper.GetTooltip("Heal")>Heal: @profession.HealSkillModifier.ToString("+#;-#;0")</small></div>
                                        <div class="col-6"><small title=@TooltipHelper.GetTooltip("Alchemy")>Alchemy: @profession.AlchemySkillModifier.ToString("+#;-#;0")</small></div>
                                        <div class="col-6"><small title=@TooltipHelper.GetTooltip("Perception")>Perception: @profession.PerceptionSkillModifier.ToString("+#;-#;0")</small></div>
                                        <div class="col-6"><small title=@TooltipHelper.GetTooltip("Foraging")>Foraging: @profession.ForagingSkillModifier.ToString("+#;-#;0")</small></div>
                                        @if (@profession.ArcaneArtsSkillModifier.HasValue)
                                        {
                                            <div class="col-6"><small title=@TooltipHelper.GetTooltip("Arcane Arts")>Arcane Arts: @profession.ArcaneArtsSkillModifier.ToString()</small></div>
                                        }
                                        @if (@profession.BattlePrayersSkillModifier.HasValue)
                                        {
                                            <div class="col-6"><small title=@TooltipHelper.GetTooltip("Battle Prayer")>Battle Prayer: @profession.BattlePrayersSkillModifier.ToString()</small></div>
                                        }
                                        <div class="col-6"><small title=@TooltipHelper.GetTooltip("HP")>Hit Points: @profession.HPModifier.ToString("+#;-#;0")</small></div>
                                    </div>

                                    @if (@profession.StartingTalentList != null)
                                    {
                                        <p class="card-text mb-1 mt-2">
                                            <strong>Starting Talents:</strong> 
                                            <small>
                                                @for (int i = 0; i < profession.StartingTalentList.Count; i++)
                                                {
                                                    var item = profession.StartingTalentList[i];

                                                    if (item != null)
                                                    {
                                                    // If the item is found, render it with a tooltip
                                                        <span title="@item.ToString()">@item.Name</span>
                                                    }
                                                    else
                                                    {
                                                    // If it's a placeholder like "Weapon of choice", just display the text
                                                        if(item != null)
                                                        {
                                                            <span>@item.Name</span>
                                                        }
                                                    }

                                                    // Add a comma and space if it's not the last item in the list
                                                    if (i < profession.StartingTalentList.Count - 1)
                                                    {
                                                        <span>, </span>
                                                    }
                                                }
                                            </small>
                                        </p>
                                    }

                                    @if (@profession.TalentChoices != null)
                                    {
                                        <p class="card-text mb-1 mt-2">
                                            <strong>Starting Talent Choices:</strong> 
                                            <small>
                                                @for (int i = 0; i < profession.TalentChoices.Count; i++)
                                                {
                                                    var item = profession.TalentChoices[i];

                                                    if (item != null)
                                                    {
                                                    // If the item is found, render it with a tooltip
                                                        <span title="@item.ToString()">@item.Name</span>
                                                    }
                                                    else
                                                    {
                                                    // If it's a placeholder like "Weapon of choice", just display the text
                                                        if(item != null)
                                                        {
                                                            <span>@item.Name</span>
                                                        }
                                                    }

                                                    // Add a comma and space if it's not the last item in the list
                                                    if (i < profession.TalentChoices.Count - 1)
                                                    {
                                                        <span>, </span>
                                                    }
                                                }
                                            </small>
                                        </p>
                                    }

                                    @if (@profession.StartingPerkList != null)
                                    {
                                        <p class="card-text mb-1 mt-2">
                                        <strong>Starting Perks:</strong> 
                                        <small>
                                            @for (int i = 0; i < profession.StartingPerkList.Count; i++)
                                            {
                                                var item = profession.StartingPerkList[i];

                                                if (item != null)
                                                {
                                                // If the item is found, render it with a tooltip
                                                    <span title="@item.ToString()">@item.Name</span>
                                                }
                                                else
                                                {
                                                // If it's a placeholder like "Weapon of choice", just display the text
                                                    if(item != null)
                                                    {
                                                        <span>@item.Name</span>
                                                    }
                                                }

                                                // Add a comma and space if it's not the last item in the list
                                                if (i < profession.StartingPerkList.Count - 1)
                                                {
                                                    <span>, </span>
                                                }
                                            }
                                        </small>
                                        </p>
                                    }

                                    @if (profession.StartingBackpackList != null)
                                    {
                                        <p class="card-text">
                                            <strong>Starting Items:</strong>
                                            <small>
                                                @for (int i = 0; i < profession.StartingBackpackList.Count; i++)
                                                {
                                                    var item = profession.StartingBackpackList[i];

                                                    if (item != null)
                                                    {
                                                    // If the item is found, render it with a tooltip
                                                        <span title="@item.ToString()">@item.GetDisplayName()</span>
                                                    }
                                                    else
                                                    {
                                                    // If it's a placeholder like "Weapon of choice", just display the text
                                                        if(item != null)
                                                        {
                                                            <span>@item.Name</span>
                                                        }
                                                    }

                                                    // Add a comma and space if it's not the last item in the list
                                                    if (i < profession.StartingBackpackList.Count - 1)
                                                    {
                                                        <span>, </span>
                                                    }
                                                }
                                            </small>                                        
                                        </p>
                                    }
                                    @if (profession.EquipmentChoices != null)
                                    {
                                        <p>
                                            <strong>Starting Item Choices: </strong>
                                            <small>                                            
                                                @for (int i = 0; i < profession.EquipmentChoices.Count; i++)
                                                {
                                                    var item = profession.EquipmentChoices[i];

                                                    <span>@item</span>

                                                    // Add a comma and space if it's not the last item in the list
                                                    if (i < profession.EquipmentChoices.Count - 1)
                                                    {
                                                        <span>, </span>
                                                    }
                                                }                                            
                                            </small>
							            </p>
                                    } 
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </section>;

    private RenderFragment TalentChoiceSelection =>@<section>
        <h3 class="text-center my-4">Choose a Starting Talent</h3>
        <p>Your chosen profession offers a choice of starting talents. Please select one.</p>
        <div class="list-group w-50 mx-auto">
            @if(State.TalentChoices != null)
            {
                @foreach(var talent in State.TalentChoices)
                {
                    <label class="list-group-item list-group-item-action">
                    <input class="form-check-input me-2" type="radio" name="talentChoice" title="@talent.ToString()" value="@talent.Name" @onchange="() => OnTalentSelected(talent.Name)" />
                        @talent
                    </label>
                }
            }
        </div>
        @if (!string.IsNullOrEmpty(selectedTalentChoice))
        {
            <div class="alert alert-success mt-3 w-50 mx-auto">
                Selected: <strong>@selectedTalentChoice</strong>
                <hr>
                <p class="mb-0 fst-italic">@GameData.GetTalentByName(selectedTalentChoice).Description</p>
            </div>
        }
    </section>;

    private RenderFragment EquipmentSelection =>@<section>
        <h3 class="text-center my-4">Starting Equipment</h3>

        <div class="row justify-content-center">
            <div class="col-md-8">

            @if (State.SpecificWeaponChoices != null)
            {
                <div class="mb-3">
                    <label class="form-label"><strong>Choose your starting weapon:</strong></label>
                    <div class="list-group">
                        @foreach(var weaponName in State.SpecificWeaponChoices)
                        {
                            <label class="list-group-item list-group-item-action">
                                <input class="form-check-input me-2" type="radio" name="weaponChoice" title="@weaponName"
                                   value="@weaponName.Name" @onchange="() => State.SelectedWeapon = weaponName.Name" />
                                    @weaponName.Name
                            </label>
                        }
                    </div>
                </div>
            }
            else if (State.WeaponChoices != null)
            {
                <div class="mb-3">
                    <label class="form-label"><strong>Choose your weapon:</strong></label>
                    <div class="list-group">
                        @foreach(var weapon in State.WeaponChoices)
                    {
                        // We only need to check MeleeWeapons for this logic
                        var meleeWeapon = weapon as MeleeWeapon;
                        var wieldStatus = meleeWeapon != null ? Hero.GetWieldStatus(State.Strength, meleeWeapon) : "(2-Handed)";
                        bool canWield = wieldStatus != "(Too weak to wield)";

                        <label class="list-group-item list-group-item-action d-flex justify-content-between align-items-center @(State.SelectedWeapon == weapon.Name ? "active" : "")">
                            <input class="form-check-input me-2" type="radio" name="weaponChoice"
                                   value="@weapon.Name" title="@weapon.ToString()"
                                   @onchange="() => State.SelectedWeapon = weapon.Name"
                                   disabled="@(!canWield)" />
                            @weapon.Name

                        @* This badge now displays the dynamic text from your new method *@
                            var wieldStatus = GameData.GetWieldStatus(CurrentHero.Strength, meleeWeapon);
                            <span class="badge rounded-pill @GetWieldStatusClass(wieldStatus)">
                                @wieldStatus
                            </span>
                        </label>
                    }
                    </div>
                </div>
            }
            @if (State.RelicChoices != null)
            {
                <div class="mb-3">
                    <label class="form-label"><strong>Choose your Religious Relic:</strong></label>
                    <InputSelect class="form-select" @bind-Value="State.SelectedRelic">
                        <option value="">-- Select a Relic --</option>
                        @foreach(var relic in State.RelicChoices)
                        {
                            <option value="@relic.Name">@relic.Name (@relic.MagicEffect)</option>
                        }
                    </InputSelect>
                </div>
            }
            @if (State.PotionChoices != null)
            {
                <div class="selection-group shadow-sm">
                    <div class="selection-header">
                        <h3>Potion Selection</h3>
                        <span class="badge @(TotalPotionsSelected == MaxSelections ? "badge-success" : "badge-secondary")">
                            @TotalPotionsSelected / @MaxSelections
                        </span>
                    </div>
                    <div class="selection-body">
                        <ul class="item-list">
                            @foreach (var potion in AvailablePotions)
                        {
                            <li class="item-row">
                                <span title="@potion.EffectDescription">@potion.Name</span>
                                <div class="quantity-selector">
                                    <button class="btn-quantity" @onclick="() => DecrementPotion(potion.Name)" disabled="@(!SelectedPotions.ContainsKey(potion.Name) || SelectedPotions[potion.Name] == 0)">-</button>
                                    <span class="quantity-display">@(SelectedPotions.ContainsKey(potion.Name) ? SelectedPotions[potion.Name] : 0)</span>
                                <button class="btn-quantity" @onclick="() => IncrementPotion(potion.Name)" disabled="@(TotalPotionsSelected >= MaxSelections)">+</button>
                                </div>
                            </li>
                        }
                        </ul>
                    </div>
                </div>
            }
                @if (State.PartChoices != null)
            {
                <div class="selection-group shadow-sm">
                    <div class="selection-header">
                        <h3>Part Selection</h3>
                        <span class="badge @(TotalPartsSelected == MaxSelections ? "badge-success" : "badge-secondary")">
                            @TotalPartsSelected / @MaxSelections
                        </span>
                    </div>
                    <div class="selection-body">
                        <ul class="item-list">
                            @foreach (var part in AvailableParts)
                            {
                                <li class="item-row">
                                    <span>@part.Name</span>
                                    <div class="quantity-selector">
                                        <button class="btn-quantity" @onclick="() => DecrementPart(part.Name)" disabled="@(!SelectedParts.ContainsKey(part.Name) || SelectedParts[part.Name] == 0)">-</button>
                                        <span class="quantity-display">@(SelectedParts.ContainsKey(part.Name) ? SelectedParts[part.Name] : 0)</span>
                                <button class="btn-quantity" @onclick="() => IncrementPart(part.Name)" disabled="@(TotalPartsSelected >= MaxSelections)">+</button>
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }
                @if (State.SpecificWeaponChoices == null &&
                    State.WeaponChoices == null && State.RelicChoices == null &&
                    State.PotionChoices == null && State.PartChoices == null)
                {
                    <p class="text-center">Your profession does not have any starting equipment choices.</p>
                }

            </div>
        </div>
    </section>;

    private RenderFragment AlchemistRecipeSelection =>@<section>

        <h3 class="text-center my-4">Create Starting Recipe</h3>
        <p>As an Alchemist, you start with one freely chosen recipe for a Weak Potion. Use the creator below to design it.</p>
        <AlchemicalRecipeCreator WeakOnlyMode="true" OnRecipeCreated="HandleRecipeCreated" />
    </section>;

    private RenderFragment FreeSkillSelection =>@<section>
        <h3>Add a Free Skill</h3>
        @if (State.FreeSkills != null && State.FreeSkills.Any()) {

        @if (!isSkillConfirmed && State.SelectedProfession != null)
    {
        <p>Your profession, <strong>@State.SelectedProfession.Name</strong>, grants one free skill.</p>
            <InputSelect class="form-select w-50" @bind-Value="selectedSkill">
            <option value="">-- Select a Skill --</option>
            @foreach (var skill in State.FreeSkills) {
            <option value="@skill">@skill</option>
        }
        </InputSelect>
        <button class="btn btn-success mt-2" @onclick="ApplySkill" disabled="@string.IsNullOrEmpty(selectedSkill)">Confirm Skill</button>
    }
    else
    {
        <div class="alert alert-success">
            <h5 class="alert-heading">Skill Confirmed!</h5>
            <p>You have selected: <strong>@selectedSkill</strong></p>
        </div>
    }
    }
    else {
        <p>Your profession does not grant any free skills at creation.</p>
    }
    </section>;

    private RenderFragment BackgroundSelection =>@<section>
        <h3 class="text-center my-4">Character Background</h3>

        @if (State.SelectedBackground == null)
        {
            <div class="text-center">
                <p>Every hero has a past. Click the button to discover your character's background. (This is an optional step.)</p>
                <button class="btn btn-info" @onclick="CreationService.RollBackground">Roll for Background</button>
            </div>
        }
        else
        {
            <div class="alert alert-light border">
            <h4 class="alert-heading">Background: @State.SelectedBackground.Name</h4>
            <p>@State.SelectedBackground.Description</p>

        @if(State.SelectedBackground.Trait != null)
        {
            <hr>
            <p class="mb-0"><strong>Trait:</strong> @State.SelectedBackground.Trait</p>
        }

        @if(!string.IsNullOrEmpty(State.SelectedBackground.PersonalQuest))
        {
            <hr>
            <p class="mb-0"><strong>Personal Quest:</strong> @State.SelectedBackground.PersonalQuest</p>
            }
            </div>
        }
    </section>;

    private RenderFragment NameSelection =>@<section>
        <h3 class="text-center my-4">Name Your Hero</h3>
        <div class="row justify-content-center">
            <div class="col-md-6">
                <label for="characterName" class="form-label">Character Name</label>
                <InputText id="characterName" class="form-control form-control-lg" @bind-Value="State.Name" placeholder="Enter a name..." />
            </div>
        </div>
    </section>;

    private RenderFragment CharacterReview =>@<section>
        <h3 class="text-center my-4">Review Your Character</h3>

        @if(currentHero == null)
        {
            currentHero = CreationService.BuildPreviewHero();
        }

        <div class="card">
            <div class="card-header">
                <h4>
                    <span TooltipText="@currentHero.ToString()">
                        @currentHero.Name
                    </span>
                </h4>
            </div>
            <div class="card-body">
                <p><strong>Species:</strong> @currentHero.SpeciesName</p>
                <p><strong>Profession:</strong> @currentHero.ProfessionName</p>

                @if (currentHero.Talents.Any())
                {
                    <p><strong>Talents:</strong></p>
                    <p>
                    @foreach(var talent in currentHero.Talents)
                        {
                            <span class="badge badge-pill badge-secondary">
                                <span title="@talent.ToString()">
                                    @talent.Name
                                </span>
                            </span>
                        }
                    </p>
                }
                @if (currentHero.Perks.Any())
                {
                    <p><strong>Perks:</strong></p>
                    <p>
                        @foreach(var perk in currentHero.Perks)
                        {
                            <span class="badge badge-pill badge-secondary">
                                <span title="@perk.ToString()">
                                    @perk.Name
                                </span>
                            </span>
                        }
                    </p>
                }

                @if (currentHero.Inventory.Backpack.Any())
                {
                    <p><strong>Equipment:</strong></p>
                    <p>
                    @foreach(var item in currentHero.Inventory.Backpack)
                        {
                            <span class="badge badge-pill badge-primary">
                                <span title="@item.ToString()">
                                    @item.GetDisplayName()
                                </span>
                            </span>
                        }
                    </p>
                }

                @if(currentHero.Spells.Any())
                {
                    <p><strong>Spells:</strong></p>
                    <p>
                    @foreach(var spell in currentHero.Spells)
                        {
                            <span class="badge badge-pill badge-dark">
                                <span title="@spell">
                                    @spell.Name
                                </span>
                            </span>
                        }
                    </p>
                }

                @if(currentHero.Prayers.Any())
                {
                    <p><strong>Prayers:</strong></p>
                    <p>
                    @foreach(var prayer in currentHero.Prayers)
                        {
                            <span class="badge badge-pill badge-dark">
                                <span title="@prayer">
                                    @prayer.Name
                                </span>
                            </span>
                        }
                    </p>
                }
            </div>
        </div>

        <div class="text-center">
            <button class="btn btn-info" @onclick="CreateNextHero">Start Over</button>
        </div>
    </section>;

    private RenderFragment CharacterSummary =>@<section>
        <h2 class="text-success">@State.Name has been added to the party!</h2>
        <p>You now have @PartyManager.Party?.Heroes.Count hero(es) in your party.</p>
        <hr />

        @if (PartyManager.Party != null && PartyManager.Party.Heroes.Count < 4)
        {
            <p>Time to create your next hero.</p>
            <button class="btn btn-lg btn-primary" @onclick="CreateNextHero">Create Another Hero</button>
        }
        else
        {
            <p>Your party is full and ready to get equipped!</p>
            <button class="btn btn-lg btn-success" @onclick="GoToShop">Head to the Shop!</button>
        }
    </section>
    ;

    #endregion

    #region Code-behind Logic
    private async Task SelectAllText(string id)
    {
        await JSRuntime.InvokeVoidAsync("selectAllText", id);
    }

    private void ShowCharacterSheet(Hero hero)
    {
        selectedHeroForSheet = hero;
        characterSheetModal.Show();
    }

    private void SelectSpecies(Species species)
    {
        humanTalentCategory = (species.Name == "Human") ? "Physical" : null;
        CreationService.SetSpecies(species);
    }

    private void ApplyManualRolls()
    {
        if (IsManualRollValid()) { CreationService.RollBaseStats(manualRolls); }
    }

    private bool IsManualRollValid()
    {
        for (int i = 0; i < 5; i++) { if (manualRolls[i] < 1 || manualRolls[i] > 10) return false; }
        if (manualRolls[5] < 1 || manualRolls[5] > 6) return false;
        return true;
    }

    private void ResetSpecialization()
    {
        CreationService.ResetSpecialization();
    }

    private async Task SelectProfession(Profession profession)
    {
        selectedProfession = profession;
        await Task.Delay(10);
        CreationService.SetProfession(profession);
        GoToNextStep();
    }

    private void OnTalentSelected(string selection)
    {
        selectedTalentChoice = selection;
        CreationService.UpdateTalentsWithSelection(selection);
    }

    private string GetWieldStatusClass(string status)
    {
        return status switch
        {
            "(1-Handed)" => "badge-success", // Green
            "(2-Handed)" => "badge-warning", // Yellow/Orange
            _ => "badge-danger"             // Red for "Too weak to wield"
        };
    }

    private void ApplySkill()
    {
        CreationService.AddFreeSkill(selectedSkill);
        GoToNextStep();
    }

    private void IncrementPotion(string itemName)
    {
        if (TotalPotionsSelected >= MaxSelections) return;

        if (SelectedPotions.ContainsKey(itemName))
        {
            SelectedPotions[itemName]++;
        }
        else
        {
            SelectedPotions[itemName] = 1;
        }
        // Directly invoke the correct callback
        HandlePotionSelectionChanged(SelectedPotions);
    }

    private void DecrementPotion(string itemName)
    {
        if (SelectedPotions.ContainsKey(itemName) && SelectedPotions[itemName] > 0)
        {
            SelectedPotions[itemName]--;
            if (SelectedPotions[itemName] == 0)
            {
                SelectedPotions.Remove(itemName);
            }
        }
        // Directly invoke the correct callback
        HandlePotionSelectionChanged(SelectedPotions);
    }

    private void IncrementPart(string itemName)
    {
        if (TotalPartsSelected >= MaxSelections) return;

        if (SelectedParts.ContainsKey(itemName))
        {
            SelectedParts[itemName]++;
        }
        else
        {
            SelectedParts[itemName] = 1;
        }
        // Directly invoke the correct callback
        HandlePartSelectionChanged(SelectedParts);
    }

    private void DecrementPart(string itemName)
    {
        if (SelectedParts.ContainsKey(itemName) && SelectedParts[itemName] > 0)
        {
            SelectedParts[itemName]--;
            if (SelectedParts[itemName] == 0)
            {
                SelectedParts.Remove(itemName);
            }
        }
        // Directly invoke the correct callback
        HandlePartSelectionChanged(SelectedParts);
    }

    // This method is bound to the OnPotionSelectionChanged event from the selector.
    private void HandlePotionSelectionChanged(Dictionary<string, int> selectedPotions)
    {
        SelectedPotions = selectedPotions;
        UpdateAlchemistEquipment();
    }

    // This method is bound to the OnPartSelectionChanged event from the selector.
    private void HandlePartSelectionChanged(Dictionary<string, int> selectedParts)
    {
        SelectedParts = selectedParts;
        UpdateAlchemistEquipment();
    }

    /// <summary>
    /// This is the core logic. It clears previous selections and adds the new ones
    /// to the character's main equipment list.
    /// </summary>
    private void UpdateAlchemistEquipment()
    {
        // Remove any potions or parts previously added by this process.
        State.StartingEquipment.RemoveAll(e => e is AlchemyItem item && (item.IsPotion || item.IsPart));

        // Add the newly selected potions to the list.
        foreach (var selection in SelectedPotions)
        {
            for (int i = 0; i < selection.Value; i++)
            {
                State.StartingEquipment.Add(AlchemyService.StandardPotions.FirstOrDefault(x => x.Name == selection.Key) ?? throw new NullReferenceException());
            }
        }

        //Add the newly selected parts to the list.
        foreach (var selection in SelectedParts)
        {
            for (int i = 0; i < selection.Value; i++)
            {
                State.StartingEquipment.Add(AlchemyService.Parts.FirstOrDefault(x => x.Name == selection.Key) ?? throw new NullReferenceException());
            }
        }
    }

    private void HandleRecipeCreated(AlchemicalRecipe recipe)
    {
        // Add the created recipe to the character creation service
        CreationService.AddStartingRecipe(recipe);
        // We can also automatically move to the next step
        GoToNextStep();
    }

    private bool IsCurrentStepValid() => currentStep switch
    {
        Step.Species => State.SelectedSpecies != null,
        Step.HumanTalent => State.HumanTalentCategoryList != null,
        Step.Specialization => State.SpecializationBonus == 0,
        Step.Profession => State.SelectedProfession != null,
        Step.TalentChoice => (State.TalentChoices == null || !State.TalentChoices.Any()) || !string.IsNullOrEmpty(selectedTalentChoice),
        Step.Equipment => State.SelectedWeapon == null || !string.IsNullOrEmpty(State.SelectedWeapon),
        Step.Name => !string.IsNullOrWhiteSpace(State.Name),
        Step.Review => true,
        _ => true
    };

    private void GoToNextStep()
    {
        if (!IsCurrentStepValid()) return;

        var nextStep = currentStep;
        do { nextStep++; } while (ShouldSkipStep(nextStep));

        currentStep = nextStep;

        if (currentStep == Step.Review)
        {
            currentHero = CreationService.BuildPreviewHero();
        }
    }

    private void GoToPreviousStep()
    {
        if (currentStep <= Step.Name) return;

        var prevStep = currentStep;
        do { prevStep--; } while (ShouldSkipStep(prevStep));

        currentStep = prevStep;
    }

    private bool ShouldSkipStep(Step step) => step switch
    {
        Step.HumanTalent => State.SelectedSpecies?.Name != "Human",
        Step.TalentChoice => State.TalentChoices == null,
        Step.Equipment => State.SpecificWeaponChoices == null && 
                          State.WeaponChoices == null && State.RelicChoices == null && 
                          State.PotionChoices == null && State.PartChoices == null,
        Step.FreeSkill => State.FreeSkills == null,
        Step.AlchemistRecipe => !State.HasRecipe,
        _ => false
    };

    private async Task FinishCreation()
    {
        if (IsCurrentStepValid() && currentHero != null)
        {
            // Finalize and add the hero to the party
            PartyManager.AddHeroToParty(currentHero);
            CreationService.FinalizeCharacter();
            await GameManager.SaveGameAsync(NavigationManager.Uri);

            // Move to the summary step to show the result
            currentStep = Step.Summary;
            
        }
    }

    private async Task CreateNextHero()
    {
        CreationService.InitializeCreationState();
        State = CreationService.State;
        // Reset all local state variables as well
        selectedProfession = null;
        selectedSkill = null;
        isSkillConfirmed = false;
        selectedTalentChoice = null;
        manualRolls = new int[6];
        await GameManager.SaveGameAsync(NavigationManager.Uri);

        currentStep = Step.Species;
    }

    private void GoToShop()
    {
        NavigationManager.NavigateTo("/party/shop");
    }
    
    private string GetProgressClass(Step step)
    {
        if (step == currentStep) return "bg-primary";
        if (step < currentStep) return "bg-success";
        return "bg-secondary";
    }

    private void SetStep(Step step)
    {
        if (step < currentStep) { currentStep = step; }
    }

    public void Dispose()
    {
        if (editContext != null)
        {
            editContext.OnFieldChanged -= HandleFieldChanged;
        }
    }
    #endregion
}