@page "/shop"
@using LoDCompanion.Models
@using LoDCompanion.Models.Character
@using LoDCompanion.Services.GameData
@using LoDCompanion.Services.State
@using LoDCompanion.Utilities

@inject GameDataService GameData

<div class="shop-container">
    <h3>Welcome to the Shop!</h3>

    @if (Party != null && Party.Heroes.Any())
    {
        <div class="party-status mb-4 p-3 bg-light rounded">
            <h4>Party Status</h4>
            <p><strong>Party Coins:</strong> @Party.Coins c</p>
            <div class="form-group">
                <label for="character-select">Purchasing Character:</label>
                <select id="character-select" class="form-control" @bind="selectedCharacterId">
                    @foreach (var member in Party.Heroes)
                    {
                        <option value="@member.Id">@member.Name</option>
                    }
                </select>
            </div>
        </div>

        <!-- Category Tabs -->
        <ul class="nav nav-tabs mb-3">
            @foreach (var category in Enum.GetValues<ShopCategory>())
            {
                <li class="nav-item">
                    <button class="nav-link @(currentCategory == category ? "active" : "")" @onclick="() => SelectCategory(category)">
                        @category.ToString()
                    </button>
                </li>
            }
        </ul>

        <!-- Items Display -->
        <div class="row">
            @if (FilteredInventory.Any())
            {
                @foreach (var item in FilteredInventory)
                {
                    <div class="col-md-4 mb-3">
                        <div class="card h-100">
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@item.Name</h5>
                                <p class="card-text flex-grow-1">@item.Description</p>
                                <div class="mt-auto">
                                    <p class="card-text"><strong>Price:</strong> @item.Value G</p>
                                    <button class="btn btn-primary" disabled="@(Party.Coins < item.Value)" @onclick="() => BuyItem(item)">
                                        Buy
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12">
                    <p><em>There are no items in this category.</em></p>
                </div>
            }
        </div>
    }
    else
    {
        <p><em>The party is not available.</em></p>
    }
</div>

@code {
    [Parameter]
    public required Party Party { get; set; }

    private string? selectedCharacterId;
    private ShopCategory currentCategory = ShopCategory.General;
    private List<Equipment> fullInventory;

    private IEnumerable<Equipment> FilteredInventory => fullInventory?.Where(item => item.Shop == currentCategory) ?? Enumerable.Empty<Equipment>();

    protected override void OnInitialized()
    {
        // Select the first character by default
        if (Party != null && Party.Heroes.Any())
        {
            selectedCharacterId = Party.Heroes.First().Id;
        }

        fullInventory = GetShopInventory();
    }

    private void SelectCategory(ShopCategory category)
    {
        currentCategory = category;
    }

    private List<Equipment> GetShopInventory()
    {
        return EquipmentService.GetShopInventory(GameData);
    }

    private void BuyItem(Equipment item)
    {
        var purchasingCharacter = Party.Heroes.FirstOrDefault(m => m.Id == selectedCharacterId);
        if (purchasingCharacter != null && Party.Coins >= item.Value)
        {
            Party.Coins -= (int)item.Value;
            BackpackHelper.AddItem(purchasingCharacter.Backpack, item);
            StateHasChanged(); // Notify the component that data has changed
        }
    }
}