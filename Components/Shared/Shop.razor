@page "/shop"
@using LoDCompanion.Models
@using LoDCompanion.Models.Character
@using LoDCompanion.Services.GameData
@using LoDCompanion.Services.Game
@using LoDCompanion.Utilities
@rendermode InteractiveServer

@inject GameDataService GameData
@inject NavigationManager NavManager

<div class="shop-container">
    <h3>Welcome to the Shop!</h3>

    @if (Party != null && Party.Heroes.Any())
    {
        <div class="party-status mb-4 p-3 bg-light rounded">
            <h4>Party Status</h4>
            <p><strong>Party Coins:</strong> @Party.Coins c</p>
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="form-group">
                        <label for="character-select"><strong>Viewing Inventory For:</strong></label>
                        <select id="character-select" class="form-select" @bind="selectedCharacterId">
                            @foreach (var member in Party.Heroes)
                            {
                                <option value="@member.Id">@member.Name</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card h-100">
                <div class="card sticky-top" style="top: 1rem;">
                    <div class="card-header">
                        @if (CurrentHero != null)
                        {
                            <h5>@CurrentHero.Name's Inventory</h5>
                        }
                    </div>
                    <ul class="list-group list-group-flush">
                        @if (CurrentHero != null && CurrentHero.Inventory.Backpack.Any())
                        {
                            @foreach (var item in CurrentHero.Inventory.Backpack)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span title="@item.ToString()">@item.Name</span>
                                    <span>
                                        <small class="text-muted me-2">Sell for: @GetSellPrice(item) c</small>
                                        <button class="btn btn-sm btn-warning" @onclick="() => SellItem(item)">Sell</button>
                                    </span>
                                </li>
                            }
                        }
                        else
                        {
                            <li class="list-group-item">Inventory is empty.</li>
                        }
                    </ul>
                </div>
            </div>
        </div>

        <!-- Category Tabs -->
        <div class="row">
            <div class="col-md-8">
                <ul class="nav nav-tabs mb-3">
                    @foreach (var category in Enum.GetValues<ShopCategory>())
                    {
                        <li class="nav-item">
                            <button class="nav-link @(currentCategory == category ? "active" : "")" @onclick="() => SelectCategory(category)">
                                @category.ToString()
                            </button>
                        </li>
                    }
                </ul>

                <!-- Items Display -->
                <div class="row">
                    @if (FilteredInventory.Any())
                    {
                        <div class="row">
                            @foreach (var item in FilteredInventory)
                            {
                                <div class="col-md-6 mb-3">
                                    <div class="card h-100">
                                        <div class="card-body d-flex flex-column">
                                            <h5 class="card-title" title=@item.ToString()>@item.Name</h5>
                                            @if (item is Weapon Weapon && CurrentHero != null)
                                            {
                                                var wieldStatus = Hero.GetWieldStatus(CurrentHero.Strength, Weapon);
                                                <span class="badge rounded-pill @GetWeaponWieldStatusClass(wieldStatus)">
                                                    @wieldStatus
                                                </span>
                                            }
                                            @if (item is Armour Armour && CurrentHero != null)
                                            {
                                                @if(CurrentHero.MaxArmour >= ((Armour)item).ArmourClass)
                                                {
                                                    <span class="badge badge-pill badge-success">
                                                        Usable by @CurrentHero.ProfessionName
                                                    </span>
                                                }
                                                else 
                                                {
                                                    <span class="badge badge-pill badge-danger">
                                                        Unusable by @CurrentHero.ProfessionName
                                                    </span>
                                                }
                                            }
                                            <p class="card-text flex-grow-1">@item.Description</p>
                                            <div class="mt-auto">
                                                <p class="card-text"><strong>Price:</strong> @item.Value c</p>
                                                <button class="btn btn-primary" disabled="@(Party.Coins < item.Value)" @onclick="() => BuyItem(item)">
                                                    Buy
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="col-12">
                            <p><em>There are no items in this category.</em></p>
                        </div>
                    }
                </div>

            </div>
        </div>
    }
    else
    {
        <p><em>The party is not available.</em></p>
    }
</div>

@code {
    [Parameter]
    public required Party Party { get; set; }

    private string? selectedCharacterId;
    private ShopCategory currentCategory = ShopCategory.General;
    private List<Equipment>? fullInventory;

    private IEnumerable<Equipment> FilteredInventory => fullInventory?.Where(item => item.Shop == currentCategory) ?? Enumerable.Empty<Equipment>();

    private Hero? CurrentHero => Party?.Heroes.FirstOrDefault(h => h.Id == selectedCharacterId);


    protected override void OnInitialized()
    {
        if (Party != null && Party.Heroes.Any())
        {
            selectedCharacterId = Party.Heroes[0].Id;
        }

        fullInventory = GetShopInventory();
    }

    private string GetWeaponWieldStatusClass(string status)
    {
        return status switch
        {
            "(1-Handed)" => "badge-success", 
            "(2-Handed)" => "badge-warning", 
            _ => "badge-danger"             
        };
    }

    private string GetArmourUseStatus(bool canUse)
    {
        return canUse switch
        {
            true => "badge-success", 
            false => "badge-warning"
        };

    }

    private void SelectCategory(ShopCategory category)
    {
        currentCategory = category;

        StateHasChanged();
    }

    private List<Equipment> GetShopInventory()
    {
        // This method assumes EquipmentService.GetShopInventory exists and works.
        return EquipmentService.GetShopInventory();
    }

    private void BuyItem(Equipment item)
    {
        var purchasingCharacter = Party.Heroes.FirstOrDefault(m => m.Id == selectedCharacterId);
        if (purchasingCharacter != null && Party.Coins >= item.Value)
        {
            Party.Coins -= (int)item.Value;
            BackpackHelper.AddItem(purchasingCharacter.Inventory.Backpack, item);
            StateHasChanged(); // This call is correct!
        }
    }

    private void SellItem(Equipment item)
    {
        if (CurrentHero != null)
        {
            // Add coins back to the party
            Party.Coins += GetSellPrice(item);
            BackpackHelper.ReSinglemoveItem(CurrentHero.Inventory.Backpack, item);
        }
    }

    private int GetSellPrice(Equipment item)
    {
        item.CalculateSalePrice();
        return item.SellValue;
    }
}