@using LoDCompanion.Services.Game
@using LoDCompanion.Services.Player
@using LoDCompanion.Services.GameData
@using LoDCompanion.Models.Character
@rendermode InteractiveServer
@implements IDisposable

@inject SpellCastingService SpellCastingService

@if (SpellCastingService.CurrentDiceRequest != null)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show" tabindex="-1" style="display: block;">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@SpellCastingService.CurrentDiceRequest.Prompt</h5>
                </div>
                <div class="modal-body">
                    <p><strong>Spell:</strong> @CurrentSpell.Name (CV: @CurrentSpell.CastingValue, Mana: @ManaCost)</p>
                    <hr />

                    @* --- Focus Points Section --- *@
                    <h6>Focus</h6>
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <span>Focus Points: <strong>@_focusPoints</strong></span>
                        <div>
                            <button class="btn btn-sm btn-secondary @(_focusPoints <= 0 ? "disabled" : "")" @onclick="() => AdjustFocus(-1)">-</button>
                            <button class="btn btn-sm btn-primary" @onclick="() => AdjustFocus(1)">+</button>
                        </div>
                    </div>
                    <p class="small text-muted">
                        To increase the chance of success, the caster may opt to take extra time to focus. Each Action Point spent on focus temporarily adds +10 to the Arcane Arts skill. However, the risk of a miscast increases by 5 for each Focus Action Point spent. The spell must be cast as the next action after the last focus action is finished.
                    </p>
                    <hr />

                    @* --- Power Levels Section --- *@
                    @if (IsPowerCastable)
                    {
                        <h6>Power Casting</h6>
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span>Power Levels: <strong>@_powerLevels</strong></span>
                            <div>
                                <button class="btn btn-sm btn-secondary @(_powerLevels <= 0 ? "disabled" : "")" @onclick="() => AdjustPower(-1)">-</button>
                                <button class="btn btn-sm btn-primary @(_powerLevels >= MaxPowerLevels ? "disabled" : "")" @onclick="() => AdjustPower(1)">+</button>
                            </div>
                        </div>
                        <p class="small text-muted">
                            Extra power can be added to Restoration and Destruction spells. Each Power Level costs an additional 2 Mana, increases Damage or Healing by +1, and increases the chance of a Miscast by 2. A wizard can add a maximum of 5 levels, or up to their own character level, whichever is lower.
                        </p>
                        <hr />
                    }

                    @* --- Summary Section --- *@
                    <h6>Summary</h6>
                    <ul class="list-unstyled">
                        <li><strong>Final Chance to Succeed:</strong> @SuccessChance%</li>
                        <li><strong>Final Miscast Chance:</strong> @MiscastChance% (on a roll of @(100 - MiscastChance + 1) or higher)</li>
                        <li><strong>Total AP Cost:</strong> @APCost</li>
                        @if (IsPowerCastable)
                        {
                            <li><strong>Bonus Damage/Healing:</strong> +@_powerLevels</li>
                        }
                    </ul>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="Cancel">Cancel</button>
                    <button type="button" class="btn btn-success" @onclick="Confirm" disabled="@(Caster.CurrentAP < APCost || Caster.CurrentMana < ManaCost)">
                        Cast Spell
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private int _focusPoints = 0;
    private int _powerLevels = 0;

    private Hero Caster => SpellCastingService.CurrentDiceRequest!.Caster;
    private Spell CurrentSpell => SpellCastingService.CurrentDiceRequest!.Spell;

    private bool IsPowerCastable => CurrentSpell.School is MagicSchool.Destruction or MagicSchool.Restoration;
    private int MaxPowerLevels => Math.Min(5, Caster.GetStat(BasicStat.Level));

    private int APCost => (CurrentSpell.Properties != null && CurrentSpell.Properties.ContainsKey(SpellProperty.QuickSpell)) ? 1 + _focusPoints : 2 + _focusPoints; // 1 AP base for casting + focus
    private int ManaCost => CurrentSpell.ManaCost + (_powerLevels * 2);
    private int SuccessChance => Math.Max(0, Math.Min(100, Caster.GetSkill(Skill.ArcaneArts) - CurrentSpell.CastingValue + (_focusPoints * 10)));
    private int MiscastChance => Math.Max(0, 6 + (_focusPoints * 5) + (_powerLevels * 2)); // 95-100 is a 6% chance (95,96,97,98,99,100)

    protected override void OnInitialized()
    {
        SpellCastingService.OnCastingRequestChanged += StateHasChanged;
    }

    private void AdjustFocus(int amount)
    {
        _focusPoints += amount;
        _focusPoints = Math.Clamp(_focusPoints, 0, 999);
    }

    private void AdjustPower(int amount)
    {
        _powerLevels += amount;
        _powerLevels = Math.Clamp(_powerLevels, 0, MaxPowerLevels);
    }

    private void Confirm()
    {
        var result = new SpellCastingResult
            {
                FocusPoints = _focusPoints,
                PowerLevels = _powerLevels
            };
        ResetState();
        SpellCastingService.CompleteSelection(result);
    }

    private void Cancel()
    {
        var result = new SpellCastingResult { WasCancelled = true };
        ResetState();
        SpellCastingService.CompleteSelection(result);
    }

    private void ResetState()
    {
        _focusPoints = 0;
        _powerLevels = 0;
    }

    public void Dispose()
    {
        SpellCastingService.OnCastingRequestChanged -= StateHasChanged;
    }
}