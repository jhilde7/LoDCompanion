@using LoDCompanion.Models
@using LoDCompanion.Models.Character
@using LoDCompanion.Services.Player
@using LoDCompanion.Services.Game
@rendermode InteractiveServer

@inject UIService UIService
@inject PartyManagerService PartyManager
@inject InventoryService Inventory

<style>
    .inventory-backdrop {
        position: fixed; /* Position relative to the whole screen */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7); /* Dim the background */
        z-index: 1050; /* A high value to ensure it's on top */
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .inventory-container {
        background-color: #2c251e;
        padding: 20px;
        border-radius: 8px;
        border: 2px solid #5a4d3a;
        box-shadow: 0 5px 15px rgba(0,0,0,0.5);
        color: #f0e6d2;
        min-width: 500px;
    }

    .inventory-slot {
    width: 80px;
    height: 80px;
    border: 2px solid #5a4d3a;
    background-color: #4a3f30;
    display: flex;
    flex-direction: column;
    justify-content: center; /* Center content vertically */
    align-items: center;
    text-align: center;
    font-size: 12px;
    padding: 4px;
    position: relative;
    color: #f0e6d2;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: normal;
    }

    .empty-slot {
    background-color: #3e3529;
    color: #8c7a60;
    }

    .item-name {
    flex-grow: 1;
    display: flex;
    align-items: center;
    padding-top: 15px; /* Add padding to avoid overlap with button */
    }

    .slot-action-button {
    position: absolute;
    top: 2px;
    right: 2px;
    width: 20px;
    height: 20px;
    border: 1px solid #1a1a1a;
    border-radius: 50%;
    color: white;
    font-weight: bold;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
    line-height: 1;
    }

    .equip {
    background-color: #198754; /* Green */
    }

    .unequip {
    background-color: #dc3545; /* Red */
    }

    .item-quantity {
    font-size: 10px;
    position: absolute;
    bottom: 2px;
    right: 4px;
    background: rgba(0,0,0,0.5);
    padding: 1px 3px;
    border-radius: 4px;
    }

    .inventory-grid {
    display: grid;
    gap: 8px;
    margin-bottom: 20px;
    }

    .equipped-grid {
    grid-template-columns: repeat(4, 1fr); /* 4 columns for equipped items */
    }

    .backpack-grid {
    grid-template-columns: repeat(auto-fill, minmax(80px, 1fr)); /* Responsive grid */
    max-height: 300px;
    overflow-y: auto;
    padding: 5px;
    background-color: #3e3529;
    border: 1px solid #5a4d3a;
    }

</style>

@if (UIService.IsInventoryVisible && PartyManager.SelectedHero != null)
{
    var hero = PartyManager.SelectedHero;

    <div class="inventory-backdrop" @onclick="UIService.HideInventoryAsync">
        <div class="inventory-container" @onclick:stopPropagation>
            <h3>@hero.Name's Inventory</h3>

            <h4>Equipped</h4>
            <div class="inventory-grid equipped-grid">
                @RenderEquippedSlot(hero.Inventory.EquippedWeapon, "Weapon")
                @RenderEquippedSlot(hero.Inventory.OffHand, "Off-Hand")
                @RenderEquippedSlot(hero.Inventory.EquippedQuiver, "Quiver")
                @foreach(var item in hero.Inventory.QuickSlots)
                {
					@RenderEquippedSlot(item, "Quick Slot")
                }
                @RenderEquippedSlot(GetEquippedArmourBySlot(hero, ArmourProperty.Cloak), "Cloak")
                @RenderEquippedSlot(GetEquippedArmourBySlot(hero, ArmourProperty.Head), "Head")
                @RenderEquippedSlot(GetEquippedArmourBySlot(hero, ArmourProperty.Torso), "Torso")
                @RenderEquippedSlot(GetEquippedArmourBySlot(hero, ArmourProperty.Arms), "Arms")
                @RenderEquippedSlot(GetEquippedArmourBySlot(hero, ArmourProperty.Legs), "Legs")
            </div>

            <h4>Backpack</h4>
            <div class="inventory-grid backpack-grid">
                @foreach (var item in hero.Inventory.Backpack.OrderBy(i => i.Name))
                {
                    <div class="inventory-slot">
                        <button class="slot-action-button equip" @onclick="() => EquipItem(item)">+</button>
                        <div class="item-name">@item.Name</div>
                        @if (item.Quantity > 1)
                        {
                            <div class="item-quantity">x @item.Quantity</div>
                        }
                    </div>
                }
            </div>

            <button class="close-button" @onclick="UIService.HideInventoryAsync">Close</button>
        </div>
    </div>
}

@code {
    /// <summary>
    /// A helper method to render a single equipment slot. It dynamically creates
    /// the HTML for either an occupied slot with an unequip button or an empty slot.
    /// </summary>
    /// <param name="item">The equipment to display, which can be null.</param>
    /// <param name="slotName">The name of the slot to display if it's empty.</param>
    private RenderFragment RenderEquippedSlot(Equipment? item, string slotName) => builder =>
    {
        if (item != null)
        {
            // If the slot is filled, show the item and an 'unequip' button.
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "inventory-slot");

            builder.OpenElement(2, "button");
            builder.AddAttribute(3, "class", "slot-action-button unequip");
            builder.AddAttribute(4, "onclick", EventCallback.Factory.Create(this, () => UnequipItem(item)));
            builder.AddContent(5, "-");
            builder.CloseElement(); // button

            builder.OpenElement(6, "div");
            builder.AddAttribute(7, "class", "item-name");
            builder.AddContent(8, item.Name);
            builder.CloseElement(); // item-name

            if (item.Quantity > 1)
            {
                builder.OpenElement(9, "div");
                builder.AddAttribute(10, "class", "item-quantity");
                builder.AddContent(11, $"x{item.Quantity}");
                builder.CloseElement(); // item-quantity
            }

            builder.CloseElement(); // inventory-slot
        }
        else
        {
            // If the slot is empty, show its name.
            builder.OpenElement(12, "div");
            builder.AddAttribute(13, "class", "inventory-slot empty-slot");
            builder.AddContent(14, slotName);
            builder.CloseElement();
        }
    };

    /// <summary>
    /// Finds the first piece of equipped armor that corresponds to a given body slot.
    /// </summary>
    /// <param name="hero">The hero whose armor to check.</param>
    /// <param name="slot">The ArmourProperty representing the body slot (e.g., Head, Torso).</param>
    /// <returns>The equipped Armour object or null if no item is in that slot.</returns>
    private Armour? GetEquippedArmourBySlot(Hero hero, ArmourProperty slot)
    {
        return hero.Inventory.EquippedArmour.FirstOrDefault(a => a.HasProperty(slot));
    }

    private void EquipItem(Equipment item)
    {
        if (PartyManager.SelectedHero != null)
        {
            Inventory.EquipItem(PartyManager.SelectedHero, item);
        }
    }

    private void UnequipItem(Equipment item)
    {
        if (PartyManager.SelectedHero != null)
        {
            Inventory.UnequipItem(PartyManager.SelectedHero, item);
        }
    }

    private async Task OnStateChangedHandler()
    {
        // InvokeAsync marshals the call to StateHasChanged to the correct UI thread.
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        UIService.OnStateChanged += OnStateChangedHandler;
        PartyManager.OnPartyChanged += StateHasChanged;
    }

    public void Dispose()
    {
        UIService.OnStateChanged -= OnStateChangedHandler;
        PartyManager.OnPartyChanged -= StateHasChanged;
    }
}