@using LoDCompanion.Services.Player
@using LoDCompanion.Services.Game
@using LoDCompanion.Services.Dungeon
@using LoDCompanion.Models.Character
@using LoDCompanion.Models

@inject CombatManagerService CombatManager

<div class="combat-interface-container">
    <div class="combat-log-wrapper">
        <h3>Combat Log</h3>
        <div class="combat-log">
            @foreach (var message in CombatManager.CombatLog.TakeLast(10))
            {
                <div class="log-entry">@message</div>
            }
        </div>
    </div>

    @if (CombatManager.ActiveHero != null)
    {
        <div class="player-action-bar">
            <h4>@CombatManager.ActiveHero.Name's Turn (@CombatManager.ActiveHero.CurrentAP AP)</h4>
            <div class="action-buttons">
                <button class="action-button" @onclick="() => PerformAction(PlayerActionType.StandardAttack)">Attack</button>
                <button class="action-button" @onclick="() => PerformAction(PlayerActionType.Move)">Move</button>
                <button class="action-button" @onclick="() => PerformAction(PlayerActionType.CastSpell)">Cast Spell</button>
                <button class="action-button end-turn" @onclick="() => PerformAction(PlayerActionType.EndTurn)">End Turn</button>
            </div>
        </div>
    }
</div>

@code {
    private enum InputState
    {
        AwaitingAction,    // Waiting for the player to click a main action button.
        SelectingTarget,   // Player has clicked "Attack", now waiting for a monster click.
        SelectingDestination // Player has clicked "Move", now waiting for a grid square click.
    }

    private InputState _currentInputState = InputState.AwaitingAction;
    private string _feedbackMessage = string.Empty;

    private void OnActionButtonClicked(PlayerActionType actionType)
    {
        switch (actionType)
        {
            case PlayerActionType.StandardAttack:
                _currentInputState = InputState.SelectingTarget;
                _feedbackMessage = "Select a target to attack.";
                break;

            case PlayerActionType.Move:
                _currentInputState = InputState.SelectingDestination;
                _feedbackMessage = "Select a destination square.";
                break;

            case PlayerActionType.EndTurn:
                // EndTurn has no target, so it can be called directly.
                CombatManager.HeroPerformsAction(PlayerActionType.EndTurn, null);
                ResetInputState();
                break;
        }
    }

    private void OnMonsterClicked(Monster targetMonster)
    {
        if (_currentInputState == InputState.SelectingTarget)
        {
            CombatManager.HeroPerformsAction(PlayerActionType.StandardAttack, targetMonster);

            ResetInputState();
        }
    }

    private void OnGridSquareClicked(GridPosition targetPosition)
    {
        if (_currentInputState == InputState.SelectingDestination)
        {
            CombatManager.HeroPerformsAction(PlayerActionType.Move, targetPosition);
            ResetInputState();
        }
    }

    private void PerformAction(PlayerActionType actionType)
    {
        CombatManager.HeroPerformsAction(actionType, null);
    }

    private void ResetInputState()
    {
        _currentInputState = InputState.AwaitingAction;
        _feedbackMessage = string.Empty;
    }

    protected override void OnInitialized()
    {
        CombatManager.OnCombatStateChanged += StateHasChanged;
    }

    public void Dispose()
    {
        CombatManager.OnCombatStateChanged -= StateHasChanged;
    }
}